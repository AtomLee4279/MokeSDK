var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameEnd_1 = require("./game/GameEnd");
var GameTopUI_1 = require("./game/GameTopUI");
var LoadScene_1 = require("./game/LoadScene");
var SceneControl_1 = require("./game/SceneControl");
var GameData_1 = require("./game/GameData");
var Hero_1 = require("./game/Hero");
var WarningDialog_1 = require("./game/WarningDialog");
var Boom_1 = require("./game/Boom");
var Enemy1_1 = require("./game/Enemy1");
var LineDot_1 = require("./game/LineDot");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("game/GameEnd.ts", GameEnd_1.default);
        reg("game/GameTopUI.ts", GameTopUI_1.default);
        reg("game/LoadScene.ts", LoadScene_1.default);
        reg("game/SceneControl.ts", SceneControl_1.default);
        reg("game/GameData.ts", GameData_1.default);
        reg("game/Hero.ts", Hero_1.default);
        reg("game/WarningDialog.ts", WarningDialog_1.default);
        reg("game/Boom.ts", Boom_1.default);
        reg("game/Enemy1.ts", Enemy1_1.default);
        reg("game/LineDot.ts", LineDot_1.default);
    };
    GameConfig.width = 720;
    GameConfig.height = 1280;
    GameConfig.scaleMode = "exactfit";
    GameConfig.screenMode = "vertical";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "GameTopUI.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./game/Boom":4,"./game/Enemy1":5,"./game/GameData":6,"./game/GameEnd":7,"./game/GameTopUI":9,"./game/Hero":10,"./game/LineDot":11,"./game/LoadScene":12,"./game/SceneControl":13,"./game/WarningDialog":16}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Stage = Laya.Stage;
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        // if (window["Laya3D"]) Laya3D.init(GameConfig.width, GameConfig.height);
        // else 
        Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        // Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        //laya.debug.DebugPanel.init();
        // Laya.Stat.show();
        // Laya.stage.bgColor = "#ffffff";
        Laya.stage.alignV = Stage.ALIGN_MIDDLE;
        Laya.stage.alignH = Stage.ALIGN_CENTER;
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        console.log("Laya.Browser.pixelRatio :" + Laya.Browser.pixelRatio);
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("./GameData");
var Singleten_1 = require("./Singleten");
var AniInst = /** @class */ (function (_super) {
    __extends(AniInst, _super);
    function AniInst() {
        var _this = _super.call(this) || this;
        _this.loop = false;
        _this.active = false;
        _this.animation = null;
        _this.init();
        return _this;
    }
    AniInst.prototype.init = function () {
        this.active = false;
        this.animation = new laya.display.Animation();
        this.addChild(this.animation);
    };
    AniInst.prototype.onEnable = function () {
    };
    AniInst.prototype.onDisable = function () {
    };
    AniInst.prototype.destroy = function (destroyChild) {
        if (destroyChild === void 0) { destroyChild = true; }
        this.removeChildByName("shadow");
        if (this.animation) {
            this.animation.visible = false;
            this.animation.stop();
            if (this.animation.loop) {
                this.animation.off(Laya.Event.COMPLETE, this, this.destroy);
            }
        }
        this.active = this.visible = false;
    };
    AniInst.prototype.playUrl = function (url, loop) {
        if (loop === void 0) { loop = true; }
        this.active = true;
        this.visible = true;
        var curUrl = GameData_1.default.ani_root + url;
        Laya.loader.load(curUrl, Laya.Handler.create(this, this.createAnimation, [curUrl, loop], false), null, Laya.Loader.ATLAS);
    };
    AniInst.prototype.createAnimation = function (url, loop) {
        var gd = Singleten_1.default.getInstanceOrCreate(GameData_1.default);
        if (gd.gameState == 0) {
            return;
        }
        this.animation.visible = true;
        this.animation.stop();
        this.animation.loadAtlas(url); // 加载图集动画
        this.animation.interval = 1000 / 12; // 设置播放间隔（单位：毫秒）
        this.animation.index = 1; // 当前播放索引
        if (loop == false) {
            this.animation.on(Laya.Event.COMPLETE, this, this.destroy);
        }
        else {
            this.animation.off(Laya.Event.COMPLETE, this, this.destroy);
        }
        this.animation.play(0, loop);
        var bounds = this.animation.getGraphicBounds();
        this.animation.pivot(bounds.width / 2, bounds.height / 2);
    };
    AniInst.addNew = function (a) {
        // AniInst.getOrCreate(a).playMo()
    };
    ;
    AniInst.getOrCreate = function (a) {
        for (var b = null, c = 0; c < GameData_1.default.LIGHT.length; c++) {
            b = GameData_1.default.LIGHT[c];
            if (false == b.active) {
                b.x = a.x;
                b.y = a.y;
                GameData_1.default.g_sharedGameLayer.addLight2(b);
                return b;
            }
        }
        b = AniInst.create();
        b.x = a.x;
        b.y = a.y;
        return b;
    };
    ;
    AniInst.create = function () {
        var a = new AniInst();
        GameData_1.default.g_sharedGameLayer.addLight2(a);
        GameData_1.default.LIGHT.push(a);
        return a;
    };
    ;
    return AniInst;
}(Laya.Image));
exports.default = AniInst;
},{"./GameData":6,"./Singleten":15}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 爆炸脚本 逻辑及对象池回收机制
 */
var Boom = /** @class */ (function (_super) {
    __extends(Boom, _super);
    function Boom() {
        return _super.call(this) || this;
    }
    Boom.prototype.onEnable = function () {
        var ani = this.owner.getChildByName("ani");
        //ani.source ="boom1/fire_a_00001.png,boom1/fire_a_00002.png,boom1/fire_a_00003.png,boom1/fire_a_00004.png,boom1/fire_a_00005.png,boom1/fire_a_00006.png,boom1/fire_a_00007.png,boom1/fire_a_00008.png,boom1/fire_a_00009.png,boom1/fire_a_00010.png"
        ani.off(laya.events.Event.COMPLETE, this, this.completeRemove);
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.completeRemove);
    };
    Boom.prototype.completeRemove = function () {
        this.owner.removeSelf();
    };
    Boom.prototype.resetSources = function () {
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.completeRemove);
        // ani.source = "fire1/b1.png,fire1/b2.png,fire1/b3.png,fire1/b4.png,fire1/b5.png,fire1/b6.png,fire1/b7.png,fire1/b8.png";
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.completeRemove);
        //ani.on(laya.events.Event.COMPLETE,this,function(){ this.owner.removeSelf();});
    };
    Boom.prototype.onDisable = function () {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("Boom", this.owner);
    };
    return Boom;
}(Laya.Script));
exports.default = Boom;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Singleten_1 = require("./Singleten");
var GameManager_1 = require("./GameManager");
/**
 * enemy脚本 逻辑及对象池回收机制
 */
var Enemy1 = /** @class */ (function (_super) {
    __extends(Enemy1, _super);
    function Enemy1() {
        return _super.call(this) || this;
    }
    Enemy1.prototype.onEnable = function () {
        //设置初始速度
        //ani.source ="boom1/fire_a_00001.png,boom1/fire_a_00002.png,boom1/fire_a_00003.png,boom1/fire_a_00004.png,boom1/fire_a_00005.png,boom1/fire_a_00006.png,boom1/fire_a_00007.png,boom1/fire_a_00008.png,boom1/fire_a_00009.png,boom1/fire_a_00010.png"
        //ani.off(laya.events.Event.COMPLETE,this,this.completeRemove);
        // ani.loop = true;
        //ani.on(laya.events.Event.COMPLETE,this,this.completeRemove);
        /* */
        this.mRight = Laya.stage.width;
        this.mLeft = 0;
        this.mKilled = false;
    };
    Enemy1.prototype.setData = function (data) {
        this.mKilled = false;
        this.data = data;
        this.speedX = data.sx;
        this.speedY = data.sy;
        this.mLife = data.life;
        var owner = this.owner;
        owner.x = data.px;
        owner.y = data.py;
        //owner.graphics.drawRect(data.cx,data.cy,80,80,null,"#FF0000");
        // owner.graphics.drawRect(0,0,8,8,null,"#FF0000");
        if (data.prefabname) {
            var ani = this.owner.getChildByName("ani");
            ani.x = data.cx;
            ani.y = data.cy;
            ani.loadAtlas("res/atlas/enemys/" + data.prefabname + ".atlas", laya.utils.Handler.create(this, this.fixPos), data.prefabname);
        }
        this.mRight = Laya.stage.width - data.w * 0.5;
        this.mLeft = data.w * 0.5;
    };
    Enemy1.prototype.fixPos = function () {
        var ani = this.owner.getChildByName("ani");
        ani.x = this.data.cx;
        ani.y = this.data.cy;
        ani.play();
    };
    Enemy1.prototype.completeRemove = function () {
        this.mKilled = true;
        this.owner.removeSelf();
    };
    Enemy1.prototype.setLife = function (m) {
        var owner = this.owner;
        owner.alpha = 0.5;
        Laya.timer.once(50, this, function (o) {
            o.alpha = 1;
        }, [owner]);
        console.log(" cut  life " + this.mLife);
        if (this.mLife - m <= 0 && this.mKilled == false) {
            this.mKilled = true;
            var man = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
            man.addPoint(this.data.pt);
            man.enemyDie({ x: owner.x, y: owner.y - this.data.h * 0.5 });
            Laya.timer.once(300, this, function () {
                this.owner.removeSelf();
            });
        }
        else {
            this.mLife -= m;
        }
    };
    Enemy1.prototype.onUpdate = function () {
        if (this.mKilled) {
            return;
        }
        var owner = this.owner;
        //speed 0.5 -2
        owner.y += this.speedY;
        owner.x += this.speedX;
        if (owner.x > this.mRight) {
            owner.x = this.mRight;
            this.speedX *= -1;
        }
        else if (owner.x < this.mLeft) {
            owner.x = this.mLeft;
            this.speedX *= -1;
        }
        if (owner.y > 1100) //Laya.stage.height)
         {
            var man = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
            man.cutLife(1);
            this.owner.removeSelf();
        }
    };
    Enemy1.prototype.resetSources = function () {
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.completeRemove);
        // ani.source = "fire1/b1.png,fire1/b2.png,fire1/b3.png,fire1/b4.png,fire1/b5.png,fire1/b6.png,fire1/b7.png,fire1/b8.png";
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.completeRemove);
        //ani.on(laya.events.Event.COMPLETE,this,function(){ this.owner.removeSelf();});
    };
    Enemy1.prototype.onDisable = function () {
        console.log(" enemy 1 on deisble ");
        var owner = this.owner;
        Laya.Pool.recover("Enemy1", this.owner);
    };
    return Enemy1;
}(Laya.Script));
exports.default = Enemy1;
},{"./GameManager":8,"./Singleten":15}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Singleten_1 = require("./Singleten");
var GameManager_1 = require("./GameManager");
var GameData = /** @class */ (function (_super) {
    __extends(GameData, _super);
    function GameData() {
        var _this = _super.call(this) || this;
        _this.m_enemylist = null;
        _this.m_timer = 0;
        _this.m_index = 0;
        _this.m_liveEnemy = 0;
        _this.m_life = 0;
        _this.m_level = 1;
        _this.manager = null;
        _this.init();
        return _this;
    }
    GameData.prototype.init = function () {
        this.m_timer = 0;
        this.m_index = 0;
        this.m_liveEnemy = 0;
        this.readData();
        var data = this.m_enemylist[this.m_index];
        this.m_timer = data.wait;
        this.manager = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
    };
    GameData.prototype.resetData = function () {
        this.m_level = this.manager.m_level;
    };
    GameData.prototype.getDataByIndex = function (i) {
        var object;
        // if (this.m_level > 4)
        // {
        //     object = this.m_enemylist[ Math.floor(Math.random()* this.m_enemylist.length)];
        // }
        // else
        // {
        //     object = this.m_enemylist[this.m_level];
        // }
        object = this.m_enemylist[i];
        var out = {};
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                out[key] = object[key];
            }
        }
        return out;
    };
    GameData.prototype.onUpdate = function () {
        if (this.manager == null || this.manager.gameState == 0) {
            return;
        }
        if (this.m_enemylist == null) {
            return;
        }
        this.m_timer -= Laya.timer.delta;
        if (this.m_timer > 0) {
            return;
        }
        else {
            if (Math.random() > 0.8) {
                this.m_timer = 2500 - 300 * this.m_level;
                if (this.m_timer <= 0) {
                    this.m_timer = 300;
                }
                return;
            }
        }
        this.generateEnemy();
        if (this.m_level > 4) {
            this.generateEnemy();
        }
        // Debug.Log(" SpawnEnemy----  m_liveEnemy  : " + m_liveEnemy+ "m_index >= m_enemylist.Count"+ m_index +" count "+ m_enemylist.Count);
        /*
         if (Singleton.getInstanceOrCreate(GameManager).m_wave < data.wave )
         {
             if ( this.m_liveEnemy > 0 )
                 return;
             else
                 this.manager.setWave(data.wave);
         }
         else
         {
            // Debug.Log(" finish wave  :" + data.wave);
         }
         
         this.m_index++;
         if (this.m_index < this.m_enemylist.length)
         
        this.m_timer = data.wait;
         this.manager.createSprite(data);
         */
        /*
                //GameObject enemymodel = Resources.Load<GameObject>(data.enemyname + "@skin");
                //GameObject enemyani = Resources.Load<GameObject>(data.enemyname + "@run");
                Vector3 dir = m_startNode.transform.position - this.transform.position;
        
                GameObject prefab = (GameObject)Resources.Load(data.prefabname);
                GameObject enmeyObj = (GameObject)Instantiate(prefab, this.transform.position,
                    Quaternion.LookRotation(dir));
                //enmeyObj.GetComponent<Animation>().AddClip(enemyani.GetComponent<Animation>().GetClip("run"), "run");
                
                //enmeyObj.GetComponent<Animation>()["run"].wrapMode = WrapMode.Loop;
               
                //enmeyObj.GetComponent<Animation>().CrossFade("run");
        
                Enemy enemy = enmeyObj.GetComponent<Enemy>();
                enemy.m_currentNode = m_startNode;
                //enemy.transform.position = m_startNode.transform.position;
        
                Vector3 localPoint;
                localPoint.x = m_startNode.transform.localPosition.x;
                localPoint.y = m_startNode.transform.localPosition.y;
                localPoint.z = 0;
                enemy.transform.localPosition = localPoint;
                // enemy.transform.Translate(m_startNode.transform.position);
        
                enemy.m_maxlife = data.life;
                enemy.m_life = data.life;
                enemy.m_speed = data.speed;
                enemy.m_damage = data.damage;
                enemy.m_point = data.point;
        
        */
        //OnEnemyDeath(enemy, (Enemy e) =>
        //{
        //    m_liveEnemy--;
        //});
    };
    GameData.prototype.generateEnemy = function () {
        if (this.m_level == 1) {
            this.doLineRandCreate();
        }
        else if (this.m_level == 3) {
            //横向 随机 
            this.doLineCreate();
        }
        else if (this.m_level == 2) {
            //双向V
            this.doVCreate();
        }
        else if (this.m_level == 4) {
            this.doDotreate();
        }
        else {
            var rd = Math.random();
            if (rd > 0.75) {
                this.doDotreate();
            }
            else if (rd > 0.5) {
                this.doLineCreate();
            }
            else if (rd > 0.25) {
                this.doVCreate();
            }
            else {
                this.doLineRandCreate();
            }
            // this.doLineCreate();
        }
        this.m_liveEnemy++;
    };
    GameData.prototype.doDotreate = function () {
        var h = Math.random() * 920;
        var w = Math.random() * 720;
        var d1 = this.getDataByIndex(4);
        var total = Math.floor(Math.random() * 20);
        var sx = Math.random() > 0.5 ? 1 : -1;
        for (var num = 0; num < total; num++) {
            var data = this.getDataByIndex(4);
            data.py = h;
            data.px = w;
            data.sx = sx;
            this.m_timer = data.wait;
            Laya.timer.once(500 * num, this, function (d) {
                this.manager.createSprite(d);
            }, [data]);
        }
    };
    GameData.prototype.doVCreate = function () {
        var h = Math.random() * 920;
        var w = Math.random() * 720;
        var d1 = this.getDataByIndex(2);
        var total = 0;
        var step = 0;
        total = w / d1.w;
        step = -d1.w;
        //total = Math.floor(Math.random()*total);
        for (var num = 0; num < total; num++) {
            var data = this.getDataByIndex(2);
            data.py = h - num * d1.h;
            data.px = w + num * step;
            this.m_timer = data.wait;
            Laya.timer.once(200 * num, this, function (d) {
                this.manager.createSprite(d);
            }, [data]);
        }
        total = (720 - w) / d1.w;
        step = d1.w;
        //total = Math.floor(Math.random()*total);
        for (var num = 0; num < total; num++) {
            var data = this.getDataByIndex(2);
            data.py = h - num * d1.h;
            data.px = w + num * step;
            this.m_timer = data.wait;
            Laya.timer.once(200 * num, this, function (d) {
                this.manager.createSprite(d);
            }, [data]);
        }
    };
    GameData.prototype.doLineRandCreate = function () {
        var h = Math.random() * 720;
        var w = Math.random() * 720;
        var d1 = this.getDataByIndex(1);
        var total = 0;
        var step = 0;
        if (w > 360) {
            total = w / d1.w;
            step = -d1.w;
        }
        else {
            total = (720 - w) / d1.w;
            step = d1.w;
        }
        total = Math.floor(Math.random() * total);
        for (var num = 0; num < total; num++) {
            var data = this.getDataByIndex(1);
            data.py = h;
            data.px = w + num * step;
            this.m_timer = data.wait;
            Laya.timer.once(200, this, function (d) {
                this.manager.createSprite(d);
            }, [data]);
        }
    };
    GameData.prototype.doLineCreate = function () {
        var h = Math.random() * 720;
        var w = Math.random() * 720;
        var d1 = this.getDataByIndex(3);
        var total = 0;
        var step = 0;
        if (w > 360) {
            total = w / d1.w;
            step = -d1.w;
        }
        else {
            total = (720 - w) / d1.w;
            step = d1.w;
        }
        //total = Math.floor(Math.random()*total);
        var lines = 1 + Math.floor(Math.random() * 3);
        for (var line = 0; line < lines; line++) {
            for (var num = 0; num < total; num++) {
                var data = this.getDataByIndex(3);
                data.py = h - line * 100;
                data.px = w + num * step;
                this.m_timer = data.wait;
                Laya.timer.once(line + 200, this, function (d) {
                    this.manager.createSprite(d);
                }, [data]);
            }
        }
    };
    GameData.prototype.readData = function () {
        this.m_enemylist = [
            { w: 112, h: 92, cx: -172, cy: -142, px: 360, py: 300, sx: 0, sy: 0.8, m: 1, wave: 1, enemyname: "enemy1", prefabname: "enemy1", level: 1, pt: 5, life: 8, damage: 1, speed: 1, wait: 2000 },
            { w: 112, h: 92, cx: -172, cy: -142, px: 360, py: 300, sx: 0, sy: 1.2, m: 1, wave: 1, enemyname: "enemy1", prefabname: "enemy1", level: 1, pt: 8, life: 4, damage: 1, speed: 1, wait: 2000 },
            { w: 74, h: 100, cx: -166, cy: -144, px: 360, py: 320, sx: 0, sy: 0.8, m: 1, wave: 1, enemyname: "enemy2", prefabname: "enemy2", level: 2, pt: 10, life: 8, damage: 1, speed: 1, wait: 3000 },
            { w: 88, h: 116, cx: -166, cy: -156, px: 160, py: 320, sx: 0, sy: 0.8, m: 1, wave: 1, enemyname: "enemy3", prefabname: "enemy3", level: 3, pt: 12, life: 8, damage: 1, speed: 1, wait: 4000 },
            { w: 88, h: 88, cx: -170, cy: -148, px: 160, py: 320, sx: 0, sy: 0.8, m: 1, wave: 1, enemyname: "enemy4", prefabname: "enemy4", level: 4, pt: 5, life: 8, damage: 1, speed: 1, wait: 6000 }
        ];
        //if (!PlayerPrefs.HasKey("music"))
        //{
        //    PlayerPrefs.SetInt("music", 1);
        //    PlayerPrefs.SetInt("music", 0);            
        //}
        //PlayerPrefs.Save();
        /*
                this.m_enemylist[0] = <table m="1" wave="1" enemyname="enemy1" prefabname="enemy1" level="1" pt="5" life="2" damage="1" speed="1" wait="2"/>
        
                XMLParser xmlparse = new XMLParser();
                XMLNode node = xmlparse.Parse(xmldata.text);
        
                XMLNodeList list = node.GetNodeList("ROOT>0>table");
                Debug.Log(" list.Count  :" + list.Count);
                for (int i = 0; i < list.Count; i++)
                {
                  
                    string wave = node.GetValue("ROOT>0>table>" + i + ">@wave");
                    string enemyname = node.GetValue("ROOT>0>table>" + i + ">@enemyname");
                    string prefabname = node.GetValue("ROOT>0>table>" + i + ">@prefabname");
                    // prefabname="00200" level="7" pt="5" life="2" damage="1" speed="1"
                    string pt = node.GetValue("ROOT>0>table>" + i + ">@pt");
                    string life = node.GetValue("ROOT>0>table>" + i + ">@life");
                    string damage = node.GetValue("ROOT>0>table>" + i + ">@damage");
                    string speed = node.GetValue("ROOT>0>table>" + i + ">@speed");
        
                    string level = node.GetValue("ROOT>0>table>" + i + ">@level");
                    string wait = node.GetValue("ROOT>0>table>" + i + ">@wait");
        
                    SpawnData data = new SpawnData();
                    data.wave = int.Parse(wave);
                    data.enemyname = enemyname;
                    data.prefabname = prefabname;
                    data.point = int.Parse(pt);
                    data.life = int.Parse(life);
                    data.damage = int.Parse(damage);
                    data.speed = int.Parse(speed);
                    data.level = int.Parse(level);
                    data.wait = float.Parse(wait);
        
                    m_enemylist.Add(data);
                }
        
                */
    };
    GameData.prototype.OnEvent = function (type, data) {
        //   if (GameManager.Instance == null || GameManager.Instance.gameState == GameState.Pause)
        //   {
        //       return;
        //   }
        this.m_liveEnemy--;
        if (this.m_index >= this.m_enemylist.length) {
            if (this.m_liveEnemy == 0) {
                if (this.manager == null || this.manager.gameState == 0) {
                }
                else {
                    this.manager.gameState = 0;
                    this.manager.showWin();
                }
            }
            return;
        }
        //if(GameManager.Instance.m_life<=0)
        //{
        //    GameManager.Instance.gameState = GameState.Pause;
        //    GameManager.Instance.showFail();
        //}
    };
    GameData.ani_root = "res/atlas/";
    GameData.CONTAINER = {
        ENEMIES: [],
        BLOOD: []
    };
    GameData.LIGHT = [];
    return GameData;
}(Laya.Script));
exports.default = GameData;
},{"./GameManager":8,"./Singleten":15}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameManager_1 = require("./GameManager");
var Singleten_1 = require("./Singleten");
var GameEnd = /** @class */ (function (_super) {
    __extends(GameEnd, _super);
    function GameEnd() {
        var _this = _super.call(this) || this;
        _this.initHandler();
        return _this;
    }
    GameEnd.prototype.initHandler = function () {
        var arr = ["", "一", "二", "三", "四", "五", "六"];
        var gm = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
        this.coins.text = "" + gm.m_points;
        this.level.text = "第" + arr[gm.m_level % 5 + 1] + "关";
        this.continue.on(laya.events.Event.CLICK, this, this.continueHandler);
        this.crazy.on(laya.events.Event.CLICK, this, this.crazyHandler);
    };
    GameEnd.prototype.unListen = function () {
        this.continue.off(laya.events.Event.CLICK, this, this.continueHandler);
        this.crazy.off(laya.events.Event.CLICK, this, this.crazyHandler);
    };
    GameEnd.prototype.continueHandler = function () {
        this.unListen();
        this.close("continue");
        var gm = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
        gm.closeGameEnd("continue");
    };
    GameEnd.prototype.crazyHandler = function () {
        this.unListen();
        this.close("crazy");
        var gm = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
        gm.closeGameEnd("crazy");
    };
    return GameEnd;
}(layaMaxUI_1.ui.GameEndUI));
exports.default = GameEnd;
},{"./../ui/layaMaxUI":17,"./GameManager":8,"./Singleten":15}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager = /** @class */ (function (_super) {
    __extends(GameManager, _super);
    function GameManager() {
        var _this = _super.call(this) || this;
        _this.m_mode = 0;
        _this.m_wave = 0;
        _this.m_life = 3;
        _this.m_points = 0;
        _this.m_energy = 0;
        _this.gameState = 0; //0 pause ; 1 running;
        _this.enemyList = [];
        _this.killedEnemyList = [];
        _this.m_level = 1;
        _this.m_reset = false;
        _this.m_lose = 0;
        _this.m_round = 0;
        return _this;
    }
    GameManager.prototype.resetData = function () {
        this.m_wave = 0;
        this.m_mode = 0;
        this.m_life = 3;
        this.m_points = 0;
        this.m_energy = 0;
        this.gameState = 0; //0 pause ; 1 running;
        this.enemyList = [];
        this.killedEnemyList = [];
        this.m_reset = false;
        this.m_lose = 0;
        this.m_round = 0;
    };
    GameManager.prototype.setWave = function (wave) {
        this.m_wave = wave;
    };
    GameManager.prototype.cutLife = function (l) {
        if (this.gameState == 0) {
            return;
        }
        this.m_life--;
        if (this.m_life <= 0) {
            if (this.gameState == 1) {
                this.gameState = 0;
                this.showFail();
            }
        }
    };
    GameManager.prototype.getBufferLife = function () {
        return parseInt("" + (this.m_energy / 100));
    };
    GameManager.prototype.getLife = function () {
        return this.m_life;
    };
    GameManager.prototype.createSprite = function (data) {
        console.log(" create  role");
        this.enemyList.push(data);
    };
    GameManager.prototype.line1 = function (data) {
        for (var i = 0; i < 4; i++) {
            this.enemyList.push(data);
        }
    };
    GameManager.prototype.enemyDie = function (pt) {
        this.killedEnemyList.push(pt);
    };
    GameManager.prototype.showWin = function () {
        console.log("You win!");
    };
    GameManager.prototype.showFail = function () {
        console.log("You fail！");
        this.gameOver();
    };
    GameManager.prototype.addPoint = function (p) {
        this.m_points += p;
        this.m_energy += 5;
        if (this.m_round != parseInt("" + (this.m_energy / 100))) {
            this.m_round = parseInt("" + (this.m_energy / 100));
            this.m_life++;
            if (this.m_life > 5) {
                this.m_life = 5;
            }
        }
        if (this.m_mode == 0) {
            this.m_level = 1 + parseInt("" + (this.m_energy / 100));
        }
    };
    GameManager.prototype.gameOver = function () {
        //let gameEnd:GameEnd = new GameEnd();
        Laya.Scene.open("GameEnd.scene", false);
        // gameEnd.closeHandler = new laya.utils.Handler(this, this.closeGameEnd);
    };
    GameManager.prototype.closeGameEnd = function (name) {
        console.log(" close  name : " + name);
        if (name == "continue") {
            this.resetData();
            this.m_life = 3;
            this.m_points = 0;
            this.gameState = 1;
            this.m_level = 1;
            this.m_mode = 0;
            this.m_reset = true;
        }
        else if (name == "crazy") {
            this.resetData();
            this.m_life = 3;
            this.m_points = 0;
            this.gameState = 1;
            this.m_level = 5;
            this.m_mode = 1;
            this.m_reset = true;
        }
    };
    return GameManager;
}(Laya.Script));
exports.default = GameManager;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var GameTopUI = /** @class */ (function (_super) {
    __extends(GameTopUI, _super);
    function GameTopUI() {
        return _super.call(this) || this;
    }
    GameTopUI.prototype.onEnable = function () {
        this.autoDestroyAtClosed = true;
        this.startBtn.on(laya.events.Event.CLICK, this, this.startGame);
    };
    GameTopUI.prototype.startGame = function () {
        Laya.Scene.open("WarningDialog.scene", true);
    };
    return GameTopUI;
}(layaMaxUI_1.ui.GameTopUIUI));
exports.default = GameTopUI;
},{"../ui/layaMaxUI":17}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 爆炸脚本 逻辑及对象池回收机制
 */
var Hero = /** @class */ (function (_super) {
    __extends(Hero, _super);
    function Hero() {
        var _this = _super.call(this) || this;
        _this.state = 1;
        return _this;
    }
    Hero.prototype.onEnable = function () {
        this.stand();
    };
    Hero.prototype.stand = function () {
        this.state = 0;
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.stand);
        ani.interval = 100;
        ani.source = "hero/stand/stand0000.png,hero/stand/stand0001.png,hero/stand/stand0002.png,hero/stand/stand0003.png,hero/stand/stand0004.png";
        ani.loop = true;
        ani.play();
    };
    Hero.prototype.attack = function () {
        if (this.state == 1) {
            return;
        }
        this.state = 1;
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.stand);
        ani.off(laya.events.Event.COMPLETE, this, this.attacking);
        ani.interval = 50;
        ani.source = "hero/attack/attack0000.png,hero/attack/attack0001.png,hero/attack/attack0002.png,hero/attack/attack0003.png,hero/attack/attack0004.png,hero/attack/attack0005.png";
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.attacking);
        ani.play();
        //ani.on(laya.events.Event.COMPLETE,this,this.completeRemove);
        //ani.on(laya.events.Event.COMPLETE,this,function(){ this.owner.removeSelf();});
    };
    Hero.prototype.attacking = function () {
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.stand);
        ani.off(laya.events.Event.COMPLETE, this, this.attacking);
        ani.source = "hero/attack/attack0005.png";
        ani.stop();
    };
    Hero.prototype.attackFinish = function () {
        if (this.state == 0) {
            return;
        }
        this.state = 0;
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.stand);
        ani.off(laya.events.Event.COMPLETE, this, this.attacking);
        ani.interval = 50;
        ani.source = "hero/attack/attack0006.png,hero/attack/attack0007.png,hero/attack/attack0008.png,hero/attack/attack0009.png,hero/attack/attack0010.png,hero/attack/attack0011.png,hero/attack/attack0012.png";
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.stand);
        ani.play();
        //ani.on(laya.events.Event.COMPLETE,this,function(){ this.owner.removeSelf();});
    };
    Hero.prototype.onDisable = function () {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("Hero", this.owner);
    };
    return Hero;
}(Laya.Script));
exports.default = Hero;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 爆炸脚本 逻辑及对象池回收机制
 */
var LineDot = /** @class */ (function (_super) {
    __extends(LineDot, _super);
    function LineDot() {
        return _super.call(this) || this;
    }
    LineDot.prototype.onEnable = function () {
        //设置初始速度
        var ani = this.owner.getChildByName("ani");
        //ani.source ="boom1/fire_a_00001.png,boom1/fire_a_00002.png,boom1/fire_a_00003.png,boom1/fire_a_00004.png,boom1/fire_a_00005.png,boom1/fire_a_00006.png,boom1/fire_a_00007.png,boom1/fire_a_00008.png,boom1/fire_a_00009.png,boom1/fire_a_00010.png"
        ani.off(laya.events.Event.COMPLETE, this, this.completeRemove);
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.completeRemove);
    };
    LineDot.prototype.completeRemove = function () {
        this.owner.removeSelf();
    };
    LineDot.prototype.resetSources = function () {
        var ani = this.owner.getChildByName("ani");
        ani.off(laya.events.Event.COMPLETE, this, this.completeRemove);
        // ani.source = "fire1/b1.png,fire1/b2.png,fire1/b3.png,fire1/b4.png,fire1/b5.png,fire1/b6.png,fire1/b7.png,fire1/b8.png";
        ani.loop = false;
        ani.on(laya.events.Event.COMPLETE, this, this.completeRemove);
        //ani.on(laya.events.Event.COMPLETE,this,function(){ this.owner.removeSelf();});
    };
    LineDot.prototype.onDisable = function () {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("LineDot", this.owner);
    };
    return LineDot;
}(Laya.Script));
exports.default = LineDot;
},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var SceneControl_1 = require("./SceneControl");
var GameManager_1 = require("./GameManager");
var Singleten_1 = require("./Singleten");
var Enemy1_1 = require("./Enemy1");
var GameData_1 = require("./GameData");
var AniInst_1 = require("./AniInst");
var Hero_1 = require("./Hero");
var ShakeCls_1 = require("./ShakeCls");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var LoadScene = /** @class */ (function (_super) {
    __extends(LoadScene, _super);
    function LoadScene() {
        var _this = _super.call(this) || this;
        _this.points = null;
        _this.bMouseDown = false;
        _this.bBufferDown = false;
        _this.bAttack = false;
        _this.lastX = 0;
        _this.lastY = 0;
        _this.count = 0;
        _this.longCounter = 0;
        _this.usedEnergy = 0;
        _this.curBuffer = "";
        _this.manager = null;
        _this.shake = new ShakeCls_1.default();
        GameData_1.default.g_sharedGameLayer = _this;
        _this.points = [];
        console.log("pts length: " + _this.points.length);
        //关闭多点触控，否则就无敌了
        Laya.MouseManager.multiTouchEnabled = false;
        _this._gameData = _this.getComponent(GameData_1.default);
        _this.fromX = _this.hit.x;
        _this.fromY = _this.hit.y;
        _this.manager = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
        _this.curLife = _this.manager.m_life;
        _this.manager.gameState = 1;
        _this.mHero = _this.hero.getComponent(Hero_1.default);
        _this.drawSp.alpha = 0.2;
        _this.ani1 = new AniInst_1.default();
        _this.ani2 = new AniInst_1.default();
        _this.ani3 = new AniInst_1.default();
        _this.ani1.y = 2000;
        _this.ani2.y = 2000;
        _this.ani3.y = 2000;
        _this.bBuffer1 = false;
        _this.bBuffer2 = false;
        _this.bBuffer3 = false;
        _this.bBuffer1Ready = false;
        _this.bBuffer2Ready = false;
        _this.bBuffer3Ready = false;
        _this.usedEnergy = 0;
        _this.longArr = new Array();
        _this.bulletArr = new Array();
        Laya.timer.loop(1000 / 60, _this, _this.loop60);
        return _this;
    }
    LoadScene.prototype.getManager = function () {
        if (this.manager == null) {
            this.manager = Singleten_1.default.getInstanceOrCreate(GameManager_1.default);
        }
        return this.manager;
    };
    LoadScene.prototype.onEnable = function () {
        this.buffer1.on(Laya.Event.MOUSE_DOWN, this, this.bufferHandler);
        this.buffer2.on(Laya.Event.MOUSE_DOWN, this, this.bufferHandler);
        this.buffer3.on(Laya.Event.MOUSE_DOWN, this, this.bufferHandler);
        this.buffer1.hitArea = new Laya.Rectangle(-40, -20, 120, 80);
        this.buffer2.hitArea = new Laya.Rectangle(-40, -20, 120, 80);
        this.buffer3.hitArea = new Laya.Rectangle(-40, -20, 120, 80);
        this.on(Laya.Event.MOUSE_DOWN, this, this.drawDown);
        this._control = this.getComponent(SceneControl_1.default);
        // this.loading.on(Laya.Event.CLICK, this, this.onTipClick);
    };
    LoadScene.prototype.bufferHandler = function (e) {
        if (e.target.name == "buffer1") {
            this.usedEnergy += 30;
        }
        else if (e.target.name == "buffer2") {
            this.usedEnergy += 75;
        }
        else if (e.target.name == "buffer3") {
            this.usedEnergy += 150;
        }
        this.on(Laya.Event.MOUSE_MOVE, this, this.BufferMove);
        this.on(Laya.Event.MOUSE_UP, this, this.bufferUp);
        this.on(Laya.Event.MOUSE_OUT, this, this.bufferUp);
        this.bBufferDown = true;
        this.bufferIcon.x = Laya.stage.mouseX - 167;
        this.bufferIcon.y = Laya.stage.mouseY - 125;
        e.stopPropagation();
        this.curBuffer = e.target.name;
    };
    LoadScene.prototype.BufferMove = function () {
        if (this.bBufferDown) {
            this.bufferIcon.x = Laya.stage.mouseX - 167;
            this.bufferIcon.y = Laya.stage.mouseY - 125;
        }
    };
    LoadScene.prototype.bufferUp = function () {
        if (this.bBufferDown) {
            if (this.curBuffer == "buffer1") {
                var ani1 = AniInst_1.default.getOrCreate({ x: Laya.stage.mouseX, y: Laya.stage.mouseY });
                // ani1.x =  Laya.stage.mouseX;
                // ani1.y = Laya.stage.mouseY;
                this.longArr.push(ani1);
                ani1.counter = 0;
                ani1.name = "long1";
                GameData_1.default.g_sharedGameLayer.addLight2(ani1);
                ani1.playUrl("guardian.atlas", true);
                //Laya.timer.loop(200,this,this.ani1Handler,[ani1]);
            }
            else if (this.curBuffer == "buffer2") {
                var ani1 = AniInst_1.default.getOrCreate({ x: Laya.stage.mouseX, y: Laya.stage.mouseY });
                // ani1.x =  Laya.stage.mouseX;
                // ani1.y = Laya.stage.mouseY;
                this.longArr.push(ani1);
                ani1.counter = 0;
                ani1.name = "long2";
                GameData_1.default.g_sharedGameLayer.addLight2(ani1);
                ani1.playUrl("guardian.atlas", true);
            }
            else if (this.curBuffer == "buffer3") {
                //    this.ani3.x =  Laya.stage.mouseX;
                //    this.ani3.y = Laya.stage.mouseY;
                //    this.ani3.counter = 0;
                //    GameData.g_sharedGameLayer.addLight2(this.ani3);
                //    this.ani3.playUrl("guardian.atlas",true);
                //    Laya.timer.loop(200,this,this.ani3Handler,[this.ani3]);
                var ani1 = AniInst_1.default.getOrCreate({ x: Laya.stage.mouseX, y: Laya.stage.mouseY });
                // ani1.x =  Laya.stage.mouseX;
                // ani1.y = Laya.stage.mouseY;
                this.longArr.push(ani1);
                ani1.counter = 0;
                ani1.name = "long3";
                GameData_1.default.g_sharedGameLayer.addLight2(ani1);
                ani1.playUrl("guardian.atlas", true);
            }
            this.curBuffer == "";
            this.bBufferDown = false;
            this.bufferIcon.y = -1500;
        }
    };
    LoadScene.prototype.longArrHandler = function () {
        for (var index = this.longArr.length - 1; index > -1; index--) {
            var element = this.longArr[index];
            if (element.name == "long1") {
                this.ani1Handler(element);
            }
            else if (element.name == "long2") {
                this.ani2Handler(element);
            }
            else if (element.name == "long3") {
                this.ani3Handler(element);
            }
        }
    };
    LoadScene.prototype.ani1Handler = function (ani) {
        ani.counter++;
        if (ani.counter < 60 && this.getManager().gameState == 1) {
            console.log(" create  booom " + ani.counter);
            //let flyer: Laya.Sprite = Laya.Pool.getItemByCreateFun("Flame", this._control.flame.create, this._control.flame);
            // var ani:laya.display.Animation =  flyer.getChildByName("ani") as laya.display.Animation;
            // ani.play(0);
            var tl = new Laya.Animation();
            //加载动画文件
            tl.loadAnimation("FireFlame.ani");
            tl.x = ani.x;
            tl.y = ani.y - 80;
            this.bulletArr.push(tl);
            this._gameBox.addChild(tl);
        }
        else {
            ani.y = 2000;
            ani.destroy();
            this.delLongArr(ani);
        }
    };
    LoadScene.prototype.ani2Handler = function (ani) {
        ani.counter++;
        if (ani.counter < 90 && this.getManager().gameState == 1) {
            console.log(" create  booom " + ani.counter);
            var tl = new Laya.Animation();
            //加载动画文件
            tl.loadAnimation("FireFlame.ani");
            tl.x = ani.x - 20;
            tl.y = ani.y - 80;
            this.bulletArr.push(tl);
            this._gameBox.addChild(tl);
            tl = new Laya.Animation();
            //加载动画文件
            tl.loadAnimation("FireFlame.ani");
            tl.x = ani.x + 20;
            tl.y = ani.y - 80;
            this.bulletArr.push(tl);
            this._gameBox.addChild(tl);
        }
        else {
            ani.y = 2000;
            ani.destroy();
            this.delLongArr(ani);
        }
    };
    LoadScene.prototype.ani3Handler = function (ani) {
        ani.counter++;
        if (ani.counter < 120 && this.getManager().gameState == 1) {
            console.log(" create  booom " + ani.counter);
            var tl = new Laya.Animation();
            //加载动画文件
            tl.loadAnimation("FireFlame.ani");
            tl.x = ani.x - 30;
            tl.y = ani.y - 80;
            this.bulletArr.push(tl);
            this._gameBox.addChild(tl);
            tl = new Laya.Animation();
            //加载动画文件
            tl.loadAnimation("FireFlame.ani");
            tl.x = ani.x + 30;
            tl.y = ani.y - 80;
            this.bulletArr.push(tl);
            this._gameBox.addChild(tl);
            tl = new Laya.Animation();
            //加载动画文件
            tl.loadAnimation("FireFlame.ani");
            tl.x = ani.x;
            tl.y = ani.y - 80;
            this.bulletArr.push(tl);
            this._gameBox.addChild(tl);
        }
        else {
            ani.y = 2000;
            ani.destroy();
            this.delLongArr(ani);
        }
    };
    LoadScene.prototype.delLongArr = function (ani) {
        var order = this.longArr.indexOf(ani);
        if (order != -1) {
            this.longArr.splice(order, 1);
        }
    };
    LoadScene.prototype.scaleToOne = function (btn) {
        btn.scaleX = 1;
        btn.scaleY = 1;
    };
    LoadScene.prototype.updateUI = function () {
        if (this.getManager().getLife() != this.curLife) {
            this.curLife = this.manager.getLife();
            this.shake.hitAndShake(this, 20, 20);
        }
        this.mCoin.text = "" + this.getManager().m_points;
        this.progress.value = this.getManager().m_energy % 100 / 100;
        var curEnergy = this.getManager().m_energy - this.usedEnergy;
        this.topProgress.value = curEnergy / 150;
        if (curEnergy >= 30) {
            this.buffer1.gray = false;
            this.buffer1.disabled = false;
            if (Math.random() > 0.95) {
                Laya.Tween.to(this.buffer1, { "rotation": 720, scaleX: 1.5, scaleY: 1.5 }, 500, null, Laya.Handler.create(this, this.scaleToOne, [this.buffer1]));
            }
        }
        else {
            this.buffer1.gray = true;
            this.buffer1.disabled = true;
        }
        if (curEnergy >= 75) {
            this.buffer2.gray = false;
            this.buffer2.disabled = false;
            if (Math.random() > 0.95) {
                Laya.Tween.to(this.buffer2, { "rotation": 720, scaleX: 1.3, scaleY: 1.3 }, 500, null, Laya.Handler.create(this, this.scaleToOne, [this.buffer2]));
            }
        }
        else {
            this.buffer2.gray = true;
            this.buffer2.disabled = true;
        }
        if (curEnergy >= 150) {
            this.buffer3.gray = false;
            this.buffer3.disabled = false;
            if (Math.random() > 0.95) {
                Laya.Tween.to(this.buffer3, { "rotation": 720, scaleX: 1.3, scaleY: 1.3 }, 500, null, Laya.Handler.create(this, this.scaleToOne, [this.buffer3]));
            }
        }
        else {
            this.buffer3.gray = true;
            this.buffer3.disabled = true;
        }
        var life = this.getManager().getLife();
        for (var i = 1; i < 6; i++) {
            if (i <= life) {
                this["life" + i].visible = true;
            }
            else {
                this["life" + i].visible = false;
            }
        }
        if (this._gameData) {
            this._gameData.resetData();
        }
    };
    LoadScene.prototype.loop60 = function () {
        if (this.manager.m_reset) {
            this.resetGame();
            this.manager.m_reset = false;
            return;
        }
        if (this.manager.gameState != 1) {
            this.updateUI();
            this._gameBox.graphics.clear();
            this.shadowBox.graphics.clear();
            this._gameBox.removeChildren();
            return;
        }
        this.longCounter++;
        if (this.longCounter == 5) {
            this.longArrHandler();
            this.longCounter = 0;
        }
        if (this.shake) {
            this.shake.update();
        }
        this.count += 17;
        if (this.count > 54) {
            this.updateUI();
            this.count = 0;
            if (this.points != null && this.points.length > 0) 
            //  if( this.points!=null && this.points.length>0 )
            {
                this.drawSp.graphics.clear();
                //if(this.points.length>2)
                {
                    //  this.points.forEach(element => {
                    // });
                    // this.drawSp.graphics.drawLines(0,0,this.getPoints(),"#e3c67c",4);
                    // this.drawSp.graphics.drawCurves(0,0,this.getPoints(),"#302a21",6);
                    this.drawSp.graphics.drawCurves(0, 0, this.getPoints(), "#d52608", 6);
                }
                //this.drawSp.cacheAs = "normal";
                //this.drawSp.cacheAs = "bitmap";
            }
            else {
                this.drawSp.graphics.clear();
            }
            if (this.getManager().enemyList.length > 0) {
                var data = this.getManager().enemyList.shift();
                //  let flyer: Laya.Sprite = Laya.Pool.getItemByCreateFun("LineDot", this._control.boom.create, this._control.boom);
                if (this._enemyBox.numChildren < this.manager.m_level * 10) {
                    if (this.manager.m_mode == 1 && this._enemyBox.numChildren > this.getManager().m_points / 5) {
                    }
                    else {
                        this.createEnemy(data);
                    }
                }
            }
        }
        this.shadowBox.graphics.clear();
        var tex = Laya.Loader.getRes("g/shadow.png");
        var lifeBg = Laya.Loader.getRes("g/bg_xiaoxuetiao_02.png");
        var lifeBar = Laya.Loader.getRes("g/bg_xiaoxuetiao_03.png");
        var element;
        var enemy;
        this._gameBox.graphics.clear();
        for (var index = this._enemyBox.numChildren - 1; index > -1; index--) {
            element = this._enemyBox.getChildAt(index);
            enemy = element.getComponent(Enemy1_1.default);
            this.shadowBox.graphics.drawTexture(tex, element.x - 34, element.y - 28);
            this._gameBox.graphics.drawTexture(lifeBg, element.x - 50, element.y - 128, 100, 9);
            this._gameBox.graphics.drawTexture(lifeBar, element.x - 50, element.y - 128, (1 - (enemy.data.life - enemy.mLife) / enemy.data.life) * 100, 9);
        }
        for (var index = this.bulletArr.length - 1; index > -1; index--) {
            var element_1 = this.bulletArr[index];
            element_1.y -= 6;
            if (element_1.y < 0) {
                this.bulletArr.splice(index, 1);
                this._gameBox.removeChild(element_1);
            }
            else {
                if (this.checkFlameBoom([element_1.x, element_1.y])) {
                    this.bulletArr.splice(index, 1);
                    this._gameBox.removeChild(element_1);
                }
            }
        }
        if (this.getManager().killedEnemyList.length > 0) {
            var data = this.getManager().killedEnemyList.shift();
            var flyer = Laya.Pool.getItemByCreateFun("Boom", this._control.boom.create, this._control.boom);
            var ani = flyer.getChildByName("ani");
            ani.play(0);
            flyer.x = data.x;
            flyer.y = data.y;
            // flyer.x = pt[0];
            // flyer.y = pt[1];
            this._gameBox.addChild(flyer);
            this._gameData.OnEvent("kill", null);
        }
        if (this.points != null && this.points.length > 0 && this.bMouseDown == false) {
            if (this.points.length > 0) {
                this.mHero.attack();
                Laya.timer.once(300, this, function () {
                    this.bAttack = true;
                });
                if (this.bAttack) {
                    var pt = this.points.shift();
                    // console.log(pt[0]);
                    // var left:number;
                    // var top:number;
                    // var right:number;
                    // var bottom:number;
                    // if(this.fromX>pt[0])
                    // {
                    //     left = pt[0];
                    //     right = this.fromX;
                    // }
                    // else
                    // {
                    //     left = this.fromX;
                    //     right = pt[0];
                    // }
                    // if(this.fromY<pt[1])
                    // {
                    //     top = this.fromY;
                    //     bottom = pt[1];
                    // }
                    // else
                    // {
                    //     top = pt[1];
                    //     bottom = this.fromY;
                    // }
                    // this.hit.left = left;
                    // this.hit.top = top;
                    // this.hit.right = 720-right;
                    // this.hit.bottom = 1120-bottom;
                    if (pt[0] < 360) {
                        this.hit.rotation = 270 - 180 / Math.PI * Math.atan2(360 - pt[0], this.hit.y - pt[1]);
                        this.hit.width = Math.sqrt(Math.pow(360 - pt[0], 2) + Math.pow(this.hit.y - pt[1], 2));
                    }
                    else if (pt[0] > 360) {
                        this.hit.rotation = 270 + 180 / Math.PI * Math.atan2(pt[0] - 360, this.hit.y - pt[1]);
                        this.hit.width = Math.sqrt(Math.pow(pt[0] - 360, 2) + Math.pow(this.hit.y - pt[1], 2));
                    }
                    else {
                        this.hit.rotation = 270;
                        this.hit.width = this.hit.y - pt[1] + 25;
                    }
                    //  let flyer: Laya.Sprite = Laya.Pool.getItemByCreateFun("LineDot", this._control.boom.create, this._control.boom);
                    var flyer = Laya.Pool.getItemByCreateFun("LineDot", this._control.lineDot.create, this._control.lineDot);
                    var ani = flyer.getChildByName("ani");
                    ani.play(0);
                    flyer.x = pt[0];
                    flyer.y = pt[1];
                    this._gameBox.addChild(flyer);
                    this.hit.visible = true;
                    this.checkBoom(pt);
                }
            }
            else {
                this.drawSp.graphics.clear();
                this.hit.visible = false;
            }
        }
        else {
            this.mHero.attackFinish();
            this.hit.visible = false;
            this.bAttack = false;
        }
    };
    LoadScene.prototype.createEnemy = function (data) {
        var out = AniInst_1.default.getOrCreate({ x: data.px, y: data.py });
        if (data.sx != 0) {
            out.playUrl("born.atlas", false);
        }
        else {
            out.playUrl("born2.atlas", false);
        }
        Laya.timer.once(500, this, function (data) {
            var flyer = Laya.Pool.getItemByCreateFun("Enemy1", this._control.enemy1.create, this._control.enemy1);
            // var ani:laya.display.Animation =  flyer.getChildByName("ani") as laya.display.Animation;
            // ani.play(0);
            var enemy = flyer.getComponent(Enemy1_1.default);
            enemy.setData(data);
            this._enemyBox.addChildAt(flyer, 0);
        }, [data]);
    };
    LoadScene.prototype.checkFlameBoom = function (pt) {
        var len = this._enemyBox._children.length;
        var rect = new laya.maths.Rectangle();
        var element;
        var enemy;
        var w = 80;
        var h = 80;
        for (var index = len - 1; index > -1; index--) {
            element = this._enemyBox.getChildAt(index);
            enemy = element.getComponent(Enemy1_1.default);
            if (enemy.mKilled) {
                continue;
            }
            w = enemy.data.w;
            h = enemy.data.h;
            // this.drawSp.graphics.drawRect(element.x,element.y,10,10,null,"#00FF00",2);
            // this.drawSp.graphics.drawRect(element.x-w/2,element.y-h,w,h,null,"#FF0000",2);
            rect.setTo(element.x - w / 2, element.y - h, w, h);
            if (rect.contains(pt[0], pt[1])) {
                element.getComponent(Enemy1_1.default).setLife(5);
                return true;
            }
        }
        return false;
    };
    LoadScene.prototype.checkBoom = function (pt) {
        var len = this._enemyBox._children.length;
        var rect = new laya.maths.Rectangle();
        var element;
        var enemy;
        var w = 80;
        var h = 80;
        for (var index = len - 1; index > -1; index--) {
            element = this._enemyBox.getChildAt(index);
            enemy = element.getComponent(Enemy1_1.default);
            if (enemy.mKilled) {
                continue;
            }
            w = enemy.data.w;
            h = enemy.data.h;
            // this.drawSp.graphics.drawRect(element.x,element.y,10,10,null,"#00FF00",2);
            // this.drawSp.graphics.drawRect(element.x-w/2,element.y-h,w,h,null,"#FF0000",2);
            rect.setTo(element.x - w / 2, element.y - h, w, h);
            if (rect.contains(pt[0], pt[1])) {
                element.getComponent(Enemy1_1.default).setLife(1);
            }
        }
    };
    LoadScene.prototype.getPoints = function () {
        var pts = [];
        if (this.points.length > 0) {
            this.points.forEach(function (element) {
                pts.push(element[0]);
                pts.push(element[1]);
            });
        }
        return pts;
    };
    LoadScene.prototype.drawDown = function (e) {
        if (this.points.length == 0) {
            this.on(Laya.Event.MOUSE_MOVE, this, this.drawMove);
            this.on(Laya.Event.MOUSE_UP, this, this.drawUp);
            this.on(Laya.Event.MOUSE_OUT, this, this.drawUp);
            this.lastX = Laya.stage.mouseX;
            this.lastY = Laya.stage.mouseY;
            this.points.push([this.lastX, this.lastY]);
            this.bMouseDown = true;
        }
    };
    LoadScene.prototype.Lerp = function (a, b, t) {
        return a + (b - a) * t;
    };
    LoadScene.prototype.drawMove = function (e) {
        if (this.bMouseDown) {
            // r = sqrt((x1- x2)*(x1 - x2) +(y1 - y2)*(y1 - y2));
            // cy = (d*(y2-y1))/r + y1;            
            // cx = (d*(x2-x1))/r + x1;
            /*
                        var d = 10;
                       // var r = Math.sqrt((Laya.stage.mouseX-this.lastX)*(Laya.stage.mouseX-this.lastX) +(Laya.stage.mouseY-this.lastY)*(Laya.stage.mouseY-this.lastY));
                        var x1 = Laya.stage.mouseX;
                        var y1 = Laya.stage.mouseY;
                        var x2 = this.lastX;
                        var y2 = this.lastY;
                        var r = Math.sqrt((x1- x2)*(x1 - x2) +(y1 - y2)*(y1 - y2));
                        var cy = (d*(y2-y1))/r + y1;
                        var cx = (d*(x2-x1))/r + x1;
            */
            var lastXT = this.Lerp(this.lastX, Laya.stage.mouseX, 0.5);
            var lastYT = this.Lerp(this.lastY, Laya.stage.mouseY, 0.5);
            var pow = Math.pow(Laya.stage.mouseX - lastXT, 2) + Math.pow(Laya.stage.mouseY - lastYT, 2);
            var top = 10;
            // var tmpXArr = [];
            // var tmpYArr = [];
            // for (let index = 1; index < top+1; index++) {
            //     tmpXArr.push( this.Lerp(this.lastX,Laya.stage.mouseX,index/top));
            //     tmpYArr.push( this.Lerp(this.lastY,Laya.stage.mouseY,index/top));
            // }
            for (var index = 1; index < 101; index++) {
                if (this.points.length > 250) {
                    return;
                }
                lastXT = this.Lerp(this.lastX, Laya.stage.mouseX, index / 100);
                lastYT = this.Lerp(this.lastY, Laya.stage.mouseY, index / 100);
                pow = Math.pow(this.lastX - lastXT, 2) + Math.pow(this.lastY - lastYT, 2);
                //if(pow>10000)
                if (pow > 80) {
                    // while(Math.pow((Laya.stage.mouseX-this.lastX)/5,2)+Math.pow((Laya.stage.mouseY-this.lastY)/5,2)>100)
                    this.lastX = lastXT;
                    this.lastY = lastYT;
                    top = 10 - index;
                    index = 1;
                    // this.lastX = Laya.stage.mouseX;
                    // this.lastY = Laya.stage.mouseY;    
                    this.points.push([this.lastX, this.lastY]);
                }
                // lastXT = this.Lerp(this.lastX,Laya.stage.mouseX,0.5);
                // lastYT = this.Lerp(this.lastY,Laya.stage.mouseY,0.5);
                // pow = Math.pow(Laya.stage.mouseX-lastXT,2)+Math.pow(Laya.stage.mouseY-lastYT,2);
                // console.log("m  move  x " + this.lastX+ "   y: "+ this.lastY+ "   pow  -- " + pow);
            }
        }
    };
    LoadScene.prototype.drawUp = function (e) {
        // console.log("m  up"+this.points.length);
        if (this.bMouseDown) {
            // if(Math.pow(Laya.stage.mouseX-this.lastX,2)+Math.pow(Laya.stage.mouseY-this.lastY,2)>16)
            // {
            //     this.lastX = Laya.stage.mouseX;
            //     this.lastY = Laya.stage.mouseY;
            //     this.points.push([this.lastX,this.lastY]);
            // }
            this.off(Laya.Event.MOUSE_MOVE, this, this.drawMove);
            this.off(Laya.Event.MOUSE_UP, this, this.drawUp);
            this.off(Laya.Event.MOUSE_OUT, this, this.drawUp);
            this.drawMove(e);
            this.bMouseDown = false;
        }
    };
    LoadScene.prototype.onTipClick = function (e) {
        //   console.log("hhhhhclickkkk ");
        // this.loading.text = this.loading.text +"."
    };
    LoadScene.prototype.addLight2 = function (ani) {
        this._gameBox.addChild(ani);
    };
    LoadScene.prototype.resetGame = function () {
        var len = this._enemyBox.numChildren;
        var element;
        var enemy;
        for (var index = len - 1; index > -1; index--) {
            element = this._enemyBox.getChildAt(index);
            enemy = element.getComponent(Enemy1_1.default);
            enemy.completeRemove();
        }
        for (var index = this.longArr.length - 1; index > -1; index--) {
            var element_2 = this.longArr[index];
            element_2.counter = 100;
            this.longArr.splice(index, 1);
        }
        this.bBuffer1 = false;
        this.bBuffer2 = false;
        this.bBuffer3 = false;
        this.bBuffer1Ready = false;
        this.bBuffer2Ready = false;
        this.bBuffer3Ready = false;
        this.usedEnergy = 0;
    };
    return LoadScene;
}(layaMaxUI_1.ui.LoadSceneUI));
exports.default = LoadScene;
},{"./../ui/layaMaxUI":17,"./AniInst":3,"./Enemy1":5,"./GameData":6,"./GameManager":8,"./Hero":10,"./SceneControl":13,"./ShakeCls":14,"./Singleten":15}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 爆炸脚本 逻辑及对象池回收机制
 */
var SceneControl = /** @class */ (function (_super) {
    __extends(SceneControl, _super);
    function SceneControl() {
        return _super.call(this) || this;
    }
    return SceneControl;
}(Laya.Script));
exports.default = SceneControl;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ShakeCls = /** @class */ (function () {
    function ShakeCls() {
        this.a = this;
        this.bool = false;
    }
    ShakeCls.prototype.hitAndShake = function (a, c, e) {
        this.bool = true;
        this.shakeee = a;
        null == this.shakeee.basex && (this.shakeee.basex = this.shakeee.x);
        null == this.shakeee.basey && (this.shakeee.basey = this.shakeee.y);
        this.shakeee.rangeX = null == c ? 20 : c;
        this.shakeee.rangeY = null == e ? 20 : e;
        this.shakeee.x = this.shakeee.basex - this.shakeee.rangeX / 2 + this.shakeee.rangeX * Math.random();
        this.shakeee.y = this.shakeee.basey - this.shakeee.rangeY + 2 * this.shakeee.rangeY * Math.random();
        this.shakeee.flashTime = 6;
        //this.shakeee.funcCall = null == f ? null : f;
        this.shakeee.shakeTimeCount = 0;
        this.shakeee.cframe = 0;
    };
    ;
    ShakeCls.prototype.update = function () {
        this.bool && (this.shakeee.cframe += 1, 2 > this.shakeee.cframe || (this.shakeee.cframe = 0, 5 == this.shakeee.shakeTimeCount ? this.a.cancelHitAndShake(this.shakeee) : (this.shakeee.shakeTimeCount++, this.shakeee.x += 1.7 * (this.shakeee.basex - this.shakeee.x), this.shakeee.y += 1.7 * (this.shakeee.basey - this.shakeee.y))));
    };
    ;
    ShakeCls.prototype.cancelHitAndShake = function (a) {
        this.bool = !1;
        a || (a = this.shakeee);
        a.x = a.basex;
        a.y = a.basey;
    };
    return ShakeCls;
}());
exports.default = ShakeCls;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Singleton = /** @class */ (function () {
    function Singleton() {
        var clazz = this["constructor"];
        //为空时，表示浏览器不支持这样读取构造函数
        if (!clazz)
            return;
        // 防止重复实例化
        if (Singleton.classKeys.indexOf(clazz) != -1)
            throw new Error(this + " 只允许实例化一次！");
        else {
            Singleton.classKeys.push(clazz);
            Singleton.classValues.push(this);
        }
    }
    /**
     * 获取实例的静态方法实例
     * @return
     *
     */
    Singleton.getInstance = function () {
        if (!this.instance) {
            this.instance = new Singleton();
        }
        return this.instance;
    };
    /**
     * 销毁方法。事实上单例是很少进行销毁的
     */
    Singleton.prototype.destroy = function (o) {
        if (o === void 0) { o = null; }
        this.onDestroy();
        Singleton.removeInstance(this["constructor"]);
    };
    /**
     * 子类重写的方法
     */
    Singleton.prototype.onDestroy = function () {
    };
    /**
     * 删除单例的实例（不对单例本身做任何的销毁，只是删除他的引用）
     * @param clazz 单例的Class对象
     *
     */
    Singleton.removeInstance = function (clazz) {
        var index = this.classKeys.indexOf(clazz);
        if (index == -1) {
            return null;
        }
        this.classKeys.splice(index, 1);
        this.classValues.splice(index, 1);
    };
    /**
     * 是否存放有这个构造函数
     * @param clazz 构造函数
     * @return {boolean}
     */
    Singleton.getFunValue = function (clazz) {
        var funs = this.classKeys;
        var length = funs.length;
        for (var i = 0; i < length; i++) {
            if (clazz == funs[i])
                return this.classValues[i];
        }
        return null;
    };
    /**
     * 获取单例类，若不存在则创建.所有的单例创建的时候，都必须使用这个方法来创建，这样可以做到统一管理单例
     * @param clazz 任意需要实现单例效果的类
     * @return
     *
     */
    Singleton.getInstanceOrCreate = function (clazz) {
        var obj = this.getFunValue(clazz);
        if (obj) {
            return obj;
        }
        obj = new clazz();
        //不是Singleton的子类，则手动添加Singleton构造器会自动添加到classMap
        if (!(obj instanceof Singleton)) {
            this.classKeys.push(clazz);
            this.classValues.push(obj);
        }
        return obj;
    };
    //其实实际的开发项目中，不一定会用到数组，有可能会把数组之类的进行封装
    /** 存放初始化过的构造函数,这里用数组来存放构造函数 **/
    Singleton.classKeys = [];
    Singleton.classValues = [];
    return Singleton;
}());
exports.default = Singleton;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var WarningDialog = /** @class */ (function (_super) {
    __extends(WarningDialog, _super);
    function WarningDialog() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        Laya.stage.on(Laya.Event.CLICK, _this, _this.onTipClick);
        _this.count = 5;
        Laya.timer.loop(1000, _this, _this.counterHandler);
        return _this;
    }
    WarningDialog.prototype.counterHandler = function () {
        this.count--;
        if (this.count < 0) {
            this.cleanSelf();
        }
        else {
            this.tips.text = "" + this.count + "秒后自动开始游戏";
        }
    };
    WarningDialog.prototype.cleanSelf = function () {
        Laya.timer.clear(this, this.counterHandler);
        Laya.stage.off(Laya.Event.CLICK, this, this.onTipClick);
        Laya.Scene.open("LoadScene.scene", true);
    };
    WarningDialog.prototype.onTipClick = function (e) {
        this.cleanSelf();
        //this.loading.text = this.loading.text +"."
    };
    return WarningDialog;
}(layaMaxUI_1.ui.WarningDialogUI));
exports.default = WarningDialog;
},{"./../ui/layaMaxUI":17}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameEndUI = /** @class */ (function (_super) {
        __extends(GameEndUI, _super);
        function GameEndUI() {
            return _super.call(this) || this;
        }
        GameEndUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameEnd");
        };
        return GameEndUI;
    }(Laya.Dialog));
    ui.GameEndUI = GameEndUI;
    REG("ui.GameEndUI", GameEndUI);
    var GameTopUIUI = /** @class */ (function (_super) {
        __extends(GameTopUIUI, _super);
        function GameTopUIUI() {
            return _super.call(this) || this;
        }
        GameTopUIUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameTopUI");
        };
        return GameTopUIUI;
    }(laya.display.Scene));
    ui.GameTopUIUI = GameTopUIUI;
    REG("ui.GameTopUIUI", GameTopUIUI);
    var LoadSceneUI = /** @class */ (function (_super) {
        __extends(LoadSceneUI, _super);
        function LoadSceneUI() {
            return _super.call(this) || this;
        }
        LoadSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadScene");
        };
        return LoadSceneUI;
    }(laya.display.Scene));
    ui.LoadSceneUI = LoadSceneUI;
    REG("ui.LoadSceneUI", LoadSceneUI);
    var WarningDialogUI = /** @class */ (function (_super) {
        __extends(WarningDialogUI, _super);
        function WarningDialogUI() {
            return _super.call(this) || this;
        }
        WarningDialogUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("WarningDialog");
        };
        return WarningDialogUI;
    }(laya.display.Scene));
    ui.WarningDialogUI = WarningDialogUI;
    REG("ui.WarningDialogUI", WarningDialogUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3h1bmxlaURvd25sb2FkL0xheWFBaXJJREVfYmV0YTIvcmVzb3VyY2VzL2FwcC9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwic3JjL0dhbWVDb25maWcudHMiLCJzcmMvTWFpbi50cyIsInNyYy9nYW1lL0FuaUluc3QudHMiLCJzcmMvZ2FtZS9Cb29tLnRzIiwic3JjL2dhbWUvRW5lbXkxLnRzIiwic3JjL2dhbWUvR2FtZURhdGEudHMiLCJzcmMvZ2FtZS9HYW1lRW5kLnRzIiwic3JjL2dhbWUvR2FtZU1hbmFnZXIudHMiLCJzcmMvZ2FtZS9HYW1lVG9wVUkudHMiLCJzcmMvZ2FtZS9IZXJvLnRzIiwic3JjL2dhbWUvTGluZURvdC50cyIsInNyYy9nYW1lL0xvYWRTY2VuZS50cyIsInNyYy9nYW1lL1NjZW5lQ29udHJvbC50cyIsInNyYy9nYW1lL1NoYWtlQ2xzLnRzIiwic3JjL2dhbWUvU2luZ2xldGVuLnRzIiwic3JjL2dhbWUvV2FybmluZ0RpYWxvZy50cyIsInNyYy91aS9sYXlhTWF4VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDVkEsZ0dBQWdHO0FBQ2hHLDBDQUFvQztBQUNwQyw4Q0FBd0M7QUFDeEMsOENBQXdDO0FBQ3hDLG9EQUE4QztBQUM5Qyw0Q0FBc0M7QUFDdEMsb0NBQThCO0FBQzlCLHNEQUFnRDtBQUNoRCxvQ0FBOEI7QUFDOUIsd0NBQWtDO0FBQ2xDLDBDQUFvQztBQUNwQzs7RUFFRTtBQUNGO0lBYUk7SUFBYyxDQUFDO0lBQ1IsZUFBSSxHQUFYO1FBQ0ksSUFBSSxHQUFHLEdBQWEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDN0MsR0FBRyxDQUFDLGlCQUFpQixFQUFDLGlCQUFPLENBQUMsQ0FBQztRQUMvQixHQUFHLENBQUMsbUJBQW1CLEVBQUMsbUJBQVMsQ0FBQyxD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QUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQztZQUN2SixFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQztZQUN2SixFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQztZQUN4SixFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQztZQUN4SixFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsSUFB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OiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cclxuaW1wb3J0IEdhbWVFbmQgZnJvbSBcIi4vZ2FtZS9HYW1lRW5kXCJcbmltcG9ydCBHYW1lVG9wVUkgZnJvbSBcIi4vZ2FtZS9HYW1lVG9wVUlcIlxuaW1wb3J0IExvYWRTY2VuZSBmcm9tIFwiLi9nYW1lL0xvYWRTY2VuZVwiXG5pbXBvcnQgU2NlbmVDb250cm9sIGZyb20gXCIuL2dhbWUvU2NlbmVDb250cm9sXCJcbmltcG9ydCBHYW1lRGF0YSBmcm9tIFwiLi9nYW1lL0dhbWVEYXRhXCJcbmltcG9ydCBIZXJvIGZyb20gXCIuL2dhbWUvSGVyb1wiXG5pbXBvcnQgV2FybmluZ0RpYWxvZyBmcm9tIFwiLi9nYW1lL1dhcm5pbmdEaWFsb2dcIlxuaW1wb3J0IEJvb20gZnJvbSBcIi4vZ2FtZS9Cb29tXCJcbmltcG9ydCBFbmVteTEgZnJvbSBcIi4vZ2FtZS9FbmVteTFcIlxuaW1wb3J0IExpbmVEb3QgZnJvbSBcIi4vZ2FtZS9MaW5lRG90XCJcclxuLypcclxuKiDmuLjmiI/liJ3lp4vljJbphY3nva47XHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb25maWd7XHJcbiAgICBzdGF0aWMgd2lkdGg6bnVtYmVyPTcyMDtcclxuICAgIHN0YXRpYyBoZWlnaHQ6bnVtYmVyPTEyODA7XHJcbiAgICBzdGF0aWMgc2NhbGVNb2RlOnN0cmluZz1cImV4YWN0Zml0XCI7XHJcbiAgICBzdGF0aWMgc2NyZWVuTW9kZTpzdHJpbmc9XCJ2ZXJ0aWNhbFwiO1xyXG4gICAgc3RhdGljIGFsaWduVjpzdHJpbmc9XCJ0b3BcIjtcclxuICAgIHN0YXRpYyBhbGlnbkg6c3RyaW5nPVwibGVmdFwiO1xyXG4gICAgc3RhdGljIHN0YXJ0U2NlbmU6YW55PVwiR2FtZVRvcFVJLnNjZW5lXCI7XHJcbiAgICBzdGF0aWMgc2NlbmVSb290OnN0cmluZz1cIlwiO1xyXG4gICAgc3RhdGljIGRlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgc3RhdDpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHBoeXNpY3NEZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIGV4cG9ydFNjZW5lVG9Kc29uOmJvb2xlYW49dHJ1ZTtcclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG4gICAgc3RhdGljIGluaXQoKXtcclxuICAgICAgICB2YXIgcmVnOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcclxuICAgICAgICByZWcoXCJnYW1lL0dhbWVFbmQudHNcIixHYW1lRW5kKTtcbiAgICAgICAgcmVnKFwiZ2FtZS9HYW1lVG9wVUkudHNcIixHYW1lVG9wVUkpO1xuICAgICAgICByZWcoXCJnYW1lL0xvYWRTY2VuZS50c1wiLExvYWRTY2VuZSk7XG4gICAgICAgIHJlZyhcImdhbWUvU2NlbmVDb250cm9sLnRzXCIsU2NlbmVDb250cm9sKTtcbiAgICAgICAgcmVnKFwiZ2FtZS9HYW1lRGF0YS50c1wiLEdhbWVEYXRhKTtcbiAgICAgICAgcmVnKFwiZ2FtZS9IZXJvLnRzXCIsSGVybyk7XG4gICAgICAgIHJlZyhcImdhbWUvV2FybmluZ0RpYWxvZy50c1wiLFdhcm5pbmdEaWFsb2cpO1xuICAgICAgICByZWcoXCJnYW1lL0Jvb20udHNcIixCb29tKTtcbiAgICAgICAgcmVnKFwiZ2FtZS9FbmVteTEudHNcIixFbmVteTEpO1xuICAgICAgICByZWcoXCJnYW1lL0xpbmVEb3QudHNcIixMaW5lRG90KTtcclxuICAgIH1cclxufVxyXG5HYW1lQ29uZmlnLmluaXQoKTsiLCJpbXBvcnQgR2FtZUNvbmZpZyBmcm9tIFwiLi9HYW1lQ29uZmlnXCI7XHJcbmltcG9ydCBTdGFnZSA9IExheWEuU3RhZ2U7XHJcbmNsYXNzIE1haW4ge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Ly/moLnmja5JREXorr7nva7liJ3lp4vljJblvJXmk45cdFx0XHJcblx0XHQvLyBpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XHJcblx0XHQvLyBlbHNlIFxyXG5cdFx0TGF5YS5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0LCBMYXlhW1wiV2ViR0xcIl0pO1xyXG5cdFx0TGF5YVtcIlBoeXNpY3NcIl0gJiYgTGF5YVtcIlBoeXNpY3NcIl0uZW5hYmxlKCk7XHJcblxyXG5cdFx0Ly8gTGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XHJcblx0XHQvL2xheWEuZGVidWcuRGVidWdQYW5lbC5pbml0KCk7XHJcblx0XHQvLyBMYXlhLlN0YXQuc2hvdygpO1xyXG5cdFx0Ly8gTGF5YS5zdGFnZS5iZ0NvbG9yID0gXCIjZmZmZmZmXCI7XHJcblx0XHRMYXlhLnN0YWdlLmFsaWduViA9IFN0YWdlLkFMSUdOX01JRERMRTtcclxuXHRcdExheWEuc3RhZ2UuYWxpZ25IID0gU3RhZ2UuQUxJR05fQ0VOVEVSO1xyXG5cclxuXHRcclxuXHRcdExheWEuc3RhZ2Uuc2NhbGVNb2RlID0gR2FtZUNvbmZpZy5zY2FsZU1vZGU7XHJcblxyXG5cdFx0TGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gR2FtZUNvbmZpZy5zY3JlZW5Nb2RlO1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKFwiTGF5YS5Ccm93c2VyLnBpeGVsUmF0aW8gOlwiK0xheWEuQnJvd3Nlci5waXhlbFJhdGlvKTtcclxuXHRcdFxyXG5cclxuXHJcblx0XHQvL+WFvOWuueW+ruS/oeS4jeaUr+aMgeWKoOi9vXNjZW5l5ZCO57yA5Zy65pmvXHJcblx0XHRMYXlhLlVSTC5leHBvcnRTY2VuZVRvSnNvbiA9IEdhbWVDb25maWcuZXhwb3J0U2NlbmVUb0pzb247XHJcblxyXG5cdFx0Ly/miZPlvIDosIPor5XpnaLmnb/vvIjpgJrov4dJREXorr7nva7osIPor5XmqKHlvI/vvIzmiJbogIV1cmzlnLDlnYDlop7liqBkZWJ1Zz10cnVl5Y+C5pWw77yM5Z2H5Y+v5omT5byA6LCD6K+V6Z2i5p2/77yJXHJcblx0XHRpZiAoR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKFwiZGVidWdcIikgPT0gXCJ0cnVlXCIpIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xyXG5cdFx0aWYgKEdhbWVDb25maWcucGh5c2ljc0RlYnVnICYmIExheWFbXCJQaHlzaWNzRGVidWdEcmF3XCJdKSBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXS5lbmFibGUoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnN0YXQpIExheWEuU3RhdC5zaG93KCk7XHJcblx0XHRMYXlhLmFsZXJ0R2xvYmFsRXJyb3IgPSB0cnVlO1xyXG5cclxuXHRcdC8v5r+A5rS76LWE5rqQ54mI5pys5o6n5Yi277yMdmVyc2lvbi5qc29u55SxSURF5Y+R5biD5Yqf6IO96Ieq5Yqo55Sf5oiQ77yM5aaC5p6c5rKh5pyJ5Lmf5LiN5b2x5ZON5ZCO57ut5rWB56iLXHJcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoXCJ2ZXJzaW9uLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uVmVyc2lvbkxvYWRlZCksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04pO1xyXG5cdH1cclxuXHJcblx0b25WZXJzaW9uTG9hZGVkKCk6IHZvaWQge1xyXG5cdFx0Ly/mv4DmtLvlpKflsI/lm77mmKDlsITvvIzliqDovb3lsI/lm77nmoTml7blgJnvvIzlpoLmnpzlj5HnjrDlsI/lm77lnKjlpKflm77lkIjpm4bph4zpnaLvvIzliJnkvJjlhYjliqDovb3lpKflm77lkIjpm4bvvIzogIzkuI3mmK/lsI/lm75cclxuXHRcdExheWEuQXRsYXNJbmZvTWFuYWdlci5lbmFibGUoXCJmaWxlY29uZmlnLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uQ29uZmlnTG9hZGVkKSk7XHJcblx0fVxyXG5cclxuXHRvbkNvbmZpZ0xvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5Yqg6L29SURF5oyH5a6a55qE5Zy65pmvXHJcblx0XHRHYW1lQ29uZmlnLnN0YXJ0U2NlbmUgJiYgTGF5YS5TY2VuZS5vcGVuKEdhbWVDb25maWcuc3RhcnRTY2VuZSk7XHJcblx0fVxyXG59XHJcbi8v5r+A5rS75ZCv5Yqo57G7XHJcbm5ldyBNYWluKCk7XHJcbiIsImltcG9ydCBHYW1lRGF0YSBmcm9tIFwiLi9HYW1lRGF0YVwiO1xyXG5pbXBvcnQgU2luZ2xldG9uIGZyb20gXCIuL1NpbmdsZXRlblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pSW5zdCBleHRlbmRzIExheWEuSW1hZ2Uge1xyXG4gICBcclxuICAgIHB1YmxpYyBsb29wOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBhY3RpdmU6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIGFuaW1hdGlvbjpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gbnVsbDtcclxuICAgIHB1YmxpYyBjb3VudGVyOm51bWJlcjtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCk7IFxyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbml0KCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYWN0aXZlICA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID1uZXcgbGF5YS5kaXNwbGF5LkFuaW1hdGlvbigpO1xyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5hbmltYXRpb24pO1xyXG4gICAgfVxyXG4gICAgb25FbmFibGUoKTogdm9pZCB7XHJcbiAgICB9XHJcblxyXG4gICAgb25EaXNhYmxlKCk6IHZvaWQge1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgZGVzdHJveShkZXN0cm95Q2hpbGQ6Qm9vbGVhbiA9IHRydWUpOnZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkQnlOYW1lKFwic2hhZG93XCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMuYW5pbWF0aW9uKVxyXG4gICAgICAgIHtcdFxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi52aXNpYmxlID1mYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24uc3RvcCgpO1xyXG4gICAgICAgICAgICBpZih0aGlzLmFuaW1hdGlvbi5sb29wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5vZmYoTGF5YS5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuZGVzdHJveSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheVVybCh1cmw6c3RyaW5nLGxvb3A6Ym9vbGVhbiA9IHRydWUpOnZvaWRcclxuICAgIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB2YXIgY3VyVXJsOnN0cmluZyA9IEdhbWVEYXRhLmFuaV9yb290ICt1cmw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgTGF5YS5sb2FkZXIubG9hZChjdXJVcmwsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5jcmVhdGVBbmltYXRpb24sW2N1clVybCxsb29wXSxmYWxzZSksbnVsbCwgTGF5YS5Mb2FkZXIuQVRMQVMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgIGNyZWF0ZUFuaW1hdGlvbih1cmwsbG9vcCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIHZhciBnZCA9U2luZ2xldG9uLmdldEluc3RhbmNlT3JDcmVhdGUoR2FtZURhdGEpO1xyXG4gICAgICAgIGlmKGdkLmdhbWVTdGF0ZSA9PTApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLnN0b3AoKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5sb2FkQXRsYXModXJsKTtcdFx0XHQvLyDliqDovb3lm77pm4bliqjnlLtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5pbnRlcnZhbCA9IDEwMDAvMTI7XHRcdFx0XHRcdC8vIOiuvue9ruaSreaUvumXtOmalO+8iOWNleS9je+8muavq+enku+8iVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmluZGV4ID0gMTtcdFx0XHRcdFx0XHQvLyDlvZPliY3mkq3mlL7ntKLlvJVcclxuICAgICAgICBpZihsb29wID09IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24ub24oTGF5YS5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuZGVzdHJveSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLm9mZihMYXlhLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5kZXN0cm95KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb24ucGxheSgwLGxvb3ApO1x0XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGJvdW5kczpMYXlhLlJlY3RhbmdsZSA9IHRoaXMuYW5pbWF0aW9uLmdldEdyYXBoaWNCb3VuZHMoKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5waXZvdChib3VuZHMud2lkdGggLyAyLCBib3VuZHMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgIGFkZE5ldyhhKTp2b2lkIHtcclxuICAgICAgICAvLyBBbmlJbnN0LmdldE9yQ3JlYXRlKGEpLnBsYXlNbygpXHJcbiAgICB9O1xyXG4gICAgcHVibGljIHN0YXRpYyAgZ2V0T3JDcmVhdGUoYTphbnkpOkFuaUluc3Qge1xyXG4gICAgICAgIGZvciAodmFyIGIgPSBudWxsLGMgPSAwOyBjIDwgR2FtZURhdGEuTElHSFQubGVuZ3RoOyBjKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiID0gR2FtZURhdGEuTElHSFRbY11cclxuICAgICAgICAgICAgaWYgKCBmYWxzZSA9PSBiLmFjdGl2ZSkgXHJcbiAgICAgICAgICAgIHtcdFxyXG4gICAgICAgICAgICAgICAgYi54ID0gYS54O1xyXG4gICAgICAgICAgICAgICAgYi55ID0gYS55O1xyXG4gICAgICAgICAgICAgICAgR2FtZURhdGEuZ19zaGFyZWRHYW1lTGF5ZXIuYWRkTGlnaHQyKGIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHRcclxuICAgICAgICBiID0gQW5pSW5zdC5jcmVhdGUoKTtcclxuICAgICAgICBiLnggPSBhLng7XHJcbiAgICAgICAgYi55ID0gYS55O1xyXG4gICAgICAgIHJldHVybiBiXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBwdWJsaWMgc3RhdGljICBjcmVhdGUoKTpBbmlJbnN0IHtcclxuICAgICAgICB2YXIgYTpBbmlJbnN0ID0gbmV3IEFuaUluc3QoKTtcclxuICAgICAgICBHYW1lRGF0YS5nX3NoYXJlZEdhbWVMYXllci5hZGRMaWdodDIoYSk7XHJcbiAgICAgICAgR2FtZURhdGEuTElHSFQucHVzaChhKTtcclxuICAgICAgICByZXR1cm4gYVxyXG4gICAgfTtcclxuXHJcblxyXG59IiwiLyoqXHJcbiAqIOeIhueCuOiEmuacrCDpgLvovpHlj4rlr7nosaHmsaDlm57mlLbmnLrliLZcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb20gZXh0ZW5kcyBMYXlhLlNjcmlwdCB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigpOyB9XHJcblxyXG4gICAgb25FbmFibGUoKTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gdGhpcy5vd25lci5nZXRDaGlsZEJ5TmFtZShcImFuaVwiKSBhcyBsYXlhLmRpc3BsYXkuQW5pbWF0aW9uO1xyXG4gICAgICAgIC8vYW5pLnNvdXJjZSA9XCJib29tMS9maXJlX2FfMDAwMDEucG5nLGJvb20xL2ZpcmVfYV8wMDAwMi5wbmcsYm9vbTEvZmlyZV9hXzAwMDAzLnBuZyxib29tMS9maXJlX2FfMDAwMDQucG5nLGJvb20xL2ZpcmVfYV8wMDAwNS5wbmcsYm9vbTEvZmlyZV9hXzAwMDA2LnBuZyxib29tMS9maXJlX2FfMDAwMDcucG5nLGJvb20xL2ZpcmVfYV8wMDAwOC5wbmcsYm9vbTEvZmlyZV9hXzAwMDA5LnBuZyxib29tMS9maXJlX2FfMDAwMTAucG5nXCJcclxuICAgICAgICBhbmkub2ZmKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5jb21wbGV0ZVJlbW92ZSk7XHJcbiAgICAgICAgYW5pLmxvb3AgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgYW5pLm9uKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5jb21wbGV0ZVJlbW92ZSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBjb21wbGV0ZVJlbW92ZSgpXHJcbiAgICB7IFxyXG4gICAgICAgIHRoaXMub3duZXIucmVtb3ZlU2VsZigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0U291cmNlcygpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gdGhpcy5vd25lci5nZXRDaGlsZEJ5TmFtZShcImFuaVwiKSBhcyBsYXlhLmRpc3BsYXkuQW5pbWF0aW9uO1xyXG4gICAgICAgIGFuaS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmNvbXBsZXRlUmVtb3ZlKTtcclxuICAgICAgIC8vIGFuaS5zb3VyY2UgPSBcImZpcmUxL2IxLnBuZyxmaXJlMS9iMi5wbmcsZmlyZTEvYjMucG5nLGZpcmUxL2I0LnBuZyxmaXJlMS9iNS5wbmcsZmlyZTEvYjYucG5nLGZpcmUxL2I3LnBuZyxmaXJlMS9iOC5wbmdcIjtcclxuICAgICAgICBhbmkubG9vcCA9IGZhbHNlO1xyXG4gICAgICAgIGFuaS5vbihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuY29tcGxldGVSZW1vdmUpO1xyXG4gICAgICAgIC8vYW5pLm9uKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsZnVuY3Rpb24oKXsgdGhpcy5vd25lci5yZW1vdmVTZWxmKCk7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgb25EaXNhYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8v5a2Q5by56KKr56e76Zmk5pe277yM5Zue5pS25a2Q5by55Yiw5a+56LGh5rGg77yM5pa55L6/5LiL5qyh5aSN55So77yM5YeP5bCR5a+56LGh5Yib5bu65byA6ZSAXHJcbiAgICAgICAgTGF5YS5Qb29sLnJlY292ZXIoXCJCb29tXCIsIHRoaXMub3duZXIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFNpbmdsZXRvbiBmcm9tIFwiLi9TaW5nbGV0ZW5cIjtcclxuaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuL0dhbWVNYW5hZ2VyXCI7XHJcblxyXG4vKipcclxuICogZW5lbXnohJrmnKwg6YC76L6R5Y+K5a+56LGh5rGg5Zue5pS25py65Yi2XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVteTEgZXh0ZW5kcyBMYXlhLlNjcmlwdCB7XHJcbiAgICBcclxuICAgIGRhdGE6YW55O1xyXG4gICAgc3BlZWRYOm51bWJlcjtcclxuICAgIHNwZWVkWTpudW1iZXI7XHJcbiAgICBtVHlwZTpudW1iZXI7XHJcbiAgICBtTGlmZTpudW1iZXI7XHJcbiAgICBtUmlnaHQ6bnVtYmVyO1xyXG4gICAgbUxlZnQ6bnVtYmVyO1xyXG4gICAgbUtpbGxlZDpib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCk7IH1cclxuXHJcbiAgICBvbkVuYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICAvL+iuvue9ruWIneWni+mAn+W6plxyXG4gICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vYW5pLnNvdXJjZSA9XCJib29tMS9maXJlX2FfMDAwMDEucG5nLGJvb20xL2ZpcmVfYV8wMDAwMi5wbmcsYm9vbTEvZmlyZV9hXzAwMDAzLnBuZyxib29tMS9maXJlX2FfMDAwMDQucG5nLGJvb20xL2ZpcmVfYV8wMDAwNS5wbmcsYm9vbTEvZmlyZV9hXzAwMDA2LnBuZyxib29tMS9maXJlX2FfMDAwMDcucG5nLGJvb20xL2ZpcmVfYV8wMDAwOC5wbmcsYm9vbTEvZmlyZV9hXzAwMDA5LnBuZyxib29tMS9maXJlX2FfMDAwMTAucG5nXCJcclxuICAgICAgICAvL2FuaS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmNvbXBsZXRlUmVtb3ZlKTtcclxuICAgICAgIC8vIGFuaS5sb29wID0gdHJ1ZTtcclxuICAgICAgICAvL2FuaS5vbihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuY29tcGxldGVSZW1vdmUpO1xyXG4gICAgICAgICAgLyogKi9cclxuICAgICAgICB0aGlzLm1SaWdodCA9IExheWEuc3RhZ2Uud2lkdGg7XHJcbiAgICAgICAgdGhpcy5tTGVmdCA9IDA7XHJcbiAgICAgICAgdGhpcy5tS2lsbGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGF0YShkYXRhOmFueSk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubUtpbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5zcGVlZFggPSBkYXRhLnN4O1xyXG4gICAgICAgIHRoaXMuc3BlZWRZID0gZGF0YS5zeTtcclxuICAgICAgICB0aGlzLm1MaWZlID0gZGF0YS5saWZlO1xyXG4gICAgICAgIHZhciBvd25lcjogTGF5YS5TcHJpdGUgPSB0aGlzLm93bmVyIGFzIExheWEuU3ByaXRlXHJcbiAgICAgICAgb3duZXIueCA9IGRhdGEucHg7XHJcbiAgICAgICAgb3duZXIueSA9IGRhdGEucHk7XHJcbiAgICAgICAgLy9vd25lci5ncmFwaGljcy5kcmF3UmVjdChkYXRhLmN4LGRhdGEuY3ksODAsODAsbnVsbCxcIiNGRjAwMDBcIik7XHJcbiAgICAgICAgLy8gb3duZXIuZ3JhcGhpY3MuZHJhd1JlY3QoMCwwLDgsOCxudWxsLFwiI0ZGMDAwMFwiKTtcclxuICAgICAgICBpZihkYXRhLnByZWZhYm5hbWUpXHJcbiAgICAgICAgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSB0aGlzLm93bmVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgICAgIGFuaS54ID0gZGF0YS5jeDtcclxuICAgICAgICAgICAgYW5pLnkgPSBkYXRhLmN5O1xyXG4gICAgICAgICAgICBhbmkubG9hZEF0bGFzKFwicmVzL2F0bGFzL2VuZW15cy9cIitkYXRhLnByZWZhYm5hbWUrXCIuYXRsYXNcIixsYXlhLnV0aWxzLkhhbmRsZXIuY3JlYXRlKHRoaXMsdGhpcy5maXhQb3MpLGRhdGEucHJlZmFibmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubVJpZ2h0ID0gTGF5YS5zdGFnZS53aWR0aC1kYXRhLncqMC41O1xyXG4gICAgICAgIHRoaXMubUxlZnQgPSBkYXRhLncqMC41O1xyXG4gICAgfVxyXG4gICAgZml4UG9zKCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gdGhpcy5vd25lci5nZXRDaGlsZEJ5TmFtZShcImFuaVwiKSBhcyBsYXlhLmRpc3BsYXkuQW5pbWF0aW9uO1xyXG4gICAgICAgYW5pLnggPSB0aGlzLmRhdGEuY3g7XHJcbiAgICAgICBhbmkueSA9IHRoaXMuZGF0YS5jeTtcclxuICAgICAgIGFuaS5wbGF5KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgY29tcGxldGVSZW1vdmUoKVxyXG4gICAgeyBcclxuICAgICAgICB0aGlzLm1LaWxsZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMub3duZXIucmVtb3ZlU2VsZigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldExpZmUobTpudW1iZXIpOnZvaWRcclxuICAgIHtcclxuICAgICAgICB2YXIgb3duZXI6IExheWEuU3ByaXRlID0gdGhpcy5vd25lciBhcyBMYXlhLlNwcml0ZTtcclxuICAgICAgICBvd25lci5hbHBoYSA9IDAuNTtcclxuICAgICAgICBMYXlhLnRpbWVyLm9uY2UoNTAsdGhpcyxmdW5jdGlvbihvOkxheWEuU3ByaXRlKTp2b2lke1xyXG4gICAgICAgICAgICBvLmFscGhhID0gMTtcclxuICAgICAgICB9LFtvd25lcl0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiIGN1dCAgbGlmZSBcIit0aGlzLm1MaWZlKTtcclxuICAgICAgICBpZih0aGlzLm1MaWZlLW08PTAgJiYgdGhpcy5tS2lsbGVkID09IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5tS2lsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIG1hbjpHYW1lTWFuYWdlciA9IFNpbmdsZXRvbi5nZXRJbnN0YW5jZU9yQ3JlYXRlKEdhbWVNYW5hZ2VyKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgbWFuLmFkZFBvaW50KHRoaXMuZGF0YS5wdCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBtYW4uZW5lbXlEaWUoe3g6b3duZXIueCx5Om93bmVyLnktdGhpcy5kYXRhLmgqMC41fSk7XHJcblxyXG4gICAgICAgICAgICBMYXlhLnRpbWVyLm9uY2UoMzAwLHRoaXMsZnVuY3Rpb24oKTp2b2lke1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vd25lci5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLm1MaWZlLT1tO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZSgpOnZvaWRcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLm1LaWxsZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvd25lcjogTGF5YS5TcHJpdGUgPSB0aGlzLm93bmVyIGFzIExheWEuU3ByaXRlXHJcbiAgICAgICAgLy9zcGVlZCAwLjUgLTJcclxuICAgICAgICBvd25lci55Kz10aGlzLnNwZWVkWTtcclxuICAgICAgICBvd25lci54Kz10aGlzLnNwZWVkWDtcclxuICAgICAgICBpZihvd25lci54PnRoaXMubVJpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb3duZXIueCA9IHRoaXMubVJpZ2h0XHJcbiAgICAgICAgICAgIHRoaXMuc3BlZWRYKj0tMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihvd25lci54PHRoaXMubUxlZnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvd25lci54ID0gdGhpcy5tTGVmdDtcclxuICAgICAgICAgICAgdGhpcy5zcGVlZFgqPS0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgaWYob3duZXIueT4gMTEwMCkvL0xheWEuc3RhZ2UuaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIG1hbjpHYW1lTWFuYWdlciA9IFNpbmdsZXRvbi5nZXRJbnN0YW5jZU9yQ3JlYXRlKEdhbWVNYW5hZ2VyKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgbWFuLmN1dExpZmUoMSk7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMub3duZXIucmVtb3ZlU2VsZigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXNldFNvdXJjZXMoKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBhbmk6bGF5YS5kaXNwbGF5LkFuaW1hdGlvbiA9IHRoaXMub3duZXIuZ2V0Q2hpbGRCeU5hbWUoXCJhbmlcIikgYXMgbGF5YS5kaXNwbGF5LkFuaW1hdGlvbjtcclxuICAgICAgICBhbmkub2ZmKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5jb21wbGV0ZVJlbW92ZSk7XHJcbiAgICAgICAvLyBhbmkuc291cmNlID0gXCJmaXJlMS9iMS5wbmcsZmlyZTEvYjIucG5nLGZpcmUxL2IzLnBuZyxmaXJlMS9iNC5wbmcsZmlyZTEvYjUucG5nLGZpcmUxL2I2LnBuZyxmaXJlMS9iNy5wbmcsZmlyZTEvYjgucG5nXCI7XHJcbiAgICAgICAgYW5pLmxvb3AgPSBmYWxzZTtcclxuICAgICAgICBhbmkub24obGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmNvbXBsZXRlUmVtb3ZlKTtcclxuICAgICAgICAvL2FuaS5vbihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLGZ1bmN0aW9uKCl7IHRoaXMub3duZXIucmVtb3ZlU2VsZigpO30pO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG5cclxuICAgIG9uRGlzYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyggXCIgZW5lbXkgMSBvbiBkZWlzYmxlIFwiKTsgICAgICAgXHJcbiAgICAgICAgdmFyIG93bmVyOiBMYXlhLlNwcml0ZSA9IHRoaXMub3duZXIgYXMgTGF5YS5TcHJpdGVcclxuICAgICAgICBcclxuICAgICAgICBMYXlhLlBvb2wucmVjb3ZlcihcIkVuZW15MVwiLCB0aGlzLm93bmVyKTtcclxuICAgIH1cclxufSIsImltcG9ydCBTaW5nbGV0b24gZnJvbSBcIi4vU2luZ2xldGVuXCI7XHJcbmltcG9ydCBHYW1lTWFuYWdlciBmcm9tIFwiLi9HYW1lTWFuYWdlclwiO1xyXG5pbXBvcnQgTG9hZFNjZW5lIGZyb20gXCIuL0xvYWRTY2VuZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZURhdGEgZXh0ZW5kcyBMYXlhLlNjcmlwdHtcclxuICAgIFxyXG4gICAgbV9lbmVteWxpc3Q6QXJyYXk8YW55PiA9IG51bGw7XHJcbiAgICBtX3RpbWVyID0gMDtcclxuICAgIG1faW5kZXggPSAwO1xyXG4gICAgbV9saXZlRW5lbXkgPSAwO1xyXG4gICAgbV9saWZlID0gMDtcclxuICAgIG1fbGV2ZWwgPSAxO1xyXG5cclxuICAgIHN0YXRpYyBhbmlfcm9vdDpzdHJpbmcgPSBcInJlcy9hdGxhcy9cIjtcclxuXHJcbiAgICBzdGF0aWMgZ19zaGFyZWRHYW1lTGF5ZXI6TG9hZFNjZW5lO1xyXG5cclxuICAgIHN0YXRpYyBDT05UQUlORVI6T2JqZWN0ID0ge1xyXG4gICAgICAgIEVORU1JRVM6IFtdLFxyXG4gICAgICAgIEJMT09EOiBbXVxyXG4gICAgXHJcbiAgICB9O1xyXG4gICAgc3RhdGljICAgTElHSFQ6QXJyYXk8YW55Pj0gW11cclxuXHJcbiAgICBtYW5hZ2VyOkdhbWVNYW5hZ2VyID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaW5pdCgpe1xyXG4gICAgICAgIHRoaXMubV90aW1lciA9IDA7XHJcbiAgICAgICAgdGhpcy5tX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLm1fbGl2ZUVuZW15ID0gMDtcclxuICAgICAgICB0aGlzLnJlYWREYXRhKCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLm1fZW5lbXlsaXN0W3RoaXMubV9pbmRleF07XHJcbiAgICAgICAgdGhpcy5tX3RpbWVyID0gZGF0YS53YWl0O1xyXG4gICAgICAgIHRoaXMubWFuYWdlciA9IFNpbmdsZXRvbi5nZXRJbnN0YW5jZU9yQ3JlYXRlKEdhbWVNYW5hZ2VyKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICByZXNldERhdGEoKVxyXG4gICAge1xyXG5cclxuICAgICAgICB0aGlzLm1fbGV2ZWwgPSB0aGlzLm1hbmFnZXIubV9sZXZlbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhQnlJbmRleChpOm51bWJlcik6YW55XHJcbiAgICB7XHJcbiAgICAgICAgdmFyIG9iamVjdDphbnkgO1xyXG4gICAgICAgIC8vIGlmICh0aGlzLm1fbGV2ZWwgPiA0KVxyXG4gICAgICAgIC8vIHtcclxuICAgICAgICAvLyAgICAgb2JqZWN0ID0gdGhpcy5tX2VuZW15bGlzdFsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKiB0aGlzLm1fZW5lbXlsaXN0Lmxlbmd0aCldO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBlbHNlXHJcbiAgICAgICAgLy8ge1xyXG4gICAgICAgIC8vICAgICBvYmplY3QgPSB0aGlzLm1fZW5lbXlsaXN0W3RoaXMubV9sZXZlbF07XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIG9iamVjdCA9IHRoaXMubV9lbmVteWxpc3RbaV07XHJcbiAgICAgICAgdmFyIG91dDphbnkgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRba2V5XSAgPSBvYmplY3Rba2V5XTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiBcclxuICAgIG9uVXBkYXRlKClcclxuICAgIHtcclxuXHJcbiBcclxuICAgICAgICBpZiAodGhpcy5tYW5hZ2VyID09IG51bGwgfHwgdGhpcy5tYW5hZ2VyLmdhbWVTdGF0ZSA9PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLm1fZW5lbXlsaXN0ID09IG51bGwpIHsgXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5tX3RpbWVyIC09IExheWEudGltZXIuZGVsdGE7XHJcbiAgICAgICAgaWYgKHRoaXMubV90aW1lciA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihNYXRoLnJhbmRvbSgpPjAuOClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3RpbWVyID0gMjUwMC0gMzAwKnRoaXMubV9sZXZlbDtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMubV90aW1lcjw9MClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdGltZXIgPSAzMDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVFbmVteSgpO1xyXG4gICAgICAgIGlmKHRoaXMubV9sZXZlbD40KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUVuZW15KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICBcclxuICAgICAgIC8vIERlYnVnLkxvZyhcIiBTcGF3bkVuZW15LS0tLSAgbV9saXZlRW5lbXkgIDogXCIgKyBtX2xpdmVFbmVteSsgXCJtX2luZGV4ID49IG1fZW5lbXlsaXN0LkNvdW50XCIrIG1faW5kZXggK1wiIGNvdW50IFwiKyBtX2VuZW15bGlzdC5Db3VudCk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgLypcclxuICAgICAgICBpZiAoU2luZ2xldG9uLmdldEluc3RhbmNlT3JDcmVhdGUoR2FtZU1hbmFnZXIpLm1fd2F2ZSA8IGRhdGEud2F2ZSApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIHRoaXMubV9saXZlRW5lbXkgPiAwIClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLnNldFdhdmUoZGF0YS53YXZlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAvLyBEZWJ1Zy5Mb2coXCIgZmluaXNoIHdhdmUgIDpcIiArIGRhdGEud2F2ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubV9pbmRleCsrO1xyXG4gICAgICAgIGlmICh0aGlzLm1faW5kZXggPCB0aGlzLm1fZW5lbXlsaXN0Lmxlbmd0aClcclxuICAgICAgICBcclxuICAgICAgIHRoaXMubV90aW1lciA9IGRhdGEud2FpdDsgICAgICAgICBcclxuICAgICAgICB0aGlzLm1hbmFnZXIuY3JlYXRlU3ByaXRlKGRhdGEpO1xyXG4gICAgICAgICovXHJcblxyXG5cclxuLypcclxuICAgICAgICAvL0dhbWVPYmplY3QgZW5lbXltb2RlbCA9IFJlc291cmNlcy5Mb2FkPEdhbWVPYmplY3Q+KGRhdGEuZW5lbXluYW1lICsgXCJAc2tpblwiKTtcclxuICAgICAgICAvL0dhbWVPYmplY3QgZW5lbXlhbmkgPSBSZXNvdXJjZXMuTG9hZDxHYW1lT2JqZWN0PihkYXRhLmVuZW15bmFtZSArIFwiQHJ1blwiKTtcclxuICAgICAgICBWZWN0b3IzIGRpciA9IG1fc3RhcnROb2RlLnRyYW5zZm9ybS5wb3NpdGlvbiAtIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG5cclxuICAgICAgICBHYW1lT2JqZWN0IHByZWZhYiA9IChHYW1lT2JqZWN0KVJlc291cmNlcy5Mb2FkKGRhdGEucHJlZmFibmFtZSk7XHJcbiAgICAgICAgR2FtZU9iamVjdCBlbm1leU9iaiA9IChHYW1lT2JqZWN0KUluc3RhbnRpYXRlKHByZWZhYiwgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24sXHJcbiAgICAgICAgICAgIFF1YXRlcm5pb24uTG9va1JvdGF0aW9uKGRpcikpO1xyXG4gICAgICAgIC8vZW5tZXlPYmouR2V0Q29tcG9uZW50PEFuaW1hdGlvbj4oKS5BZGRDbGlwKGVuZW15YW5pLkdldENvbXBvbmVudDxBbmltYXRpb24+KCkuR2V0Q2xpcChcInJ1blwiKSwgXCJydW5cIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9lbm1leU9iai5HZXRDb21wb25lbnQ8QW5pbWF0aW9uPigpW1wicnVuXCJdLndyYXBNb2RlID0gV3JhcE1vZGUuTG9vcDtcclxuICAgICAgIFxyXG4gICAgICAgIC8vZW5tZXlPYmouR2V0Q29tcG9uZW50PEFuaW1hdGlvbj4oKS5Dcm9zc0ZhZGUoXCJydW5cIik7XHJcblxyXG4gICAgICAgIEVuZW15IGVuZW15ID0gZW5tZXlPYmouR2V0Q29tcG9uZW50PEVuZW15PigpO1xyXG4gICAgICAgIGVuZW15Lm1fY3VycmVudE5vZGUgPSBtX3N0YXJ0Tm9kZTtcclxuICAgICAgICAvL2VuZW15LnRyYW5zZm9ybS5wb3NpdGlvbiA9IG1fc3RhcnROb2RlLnRyYW5zZm9ybS5wb3NpdGlvbjtcclxuXHJcbiAgICAgICAgVmVjdG9yMyBsb2NhbFBvaW50O1xyXG4gICAgICAgIGxvY2FsUG9pbnQueCA9IG1fc3RhcnROb2RlLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uLng7XHJcbiAgICAgICAgbG9jYWxQb2ludC55ID0gbV9zdGFydE5vZGUudHJhbnNmb3JtLmxvY2FsUG9zaXRpb24ueTtcclxuICAgICAgICBsb2NhbFBvaW50LnogPSAwO1xyXG4gICAgICAgIGVuZW15LnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uID0gbG9jYWxQb2ludDtcclxuICAgICAgICAvLyBlbmVteS50cmFuc2Zvcm0uVHJhbnNsYXRlKG1fc3RhcnROb2RlLnRyYW5zZm9ybS5wb3NpdGlvbik7XHJcblxyXG4gICAgICAgIGVuZW15Lm1fbWF4bGlmZSA9IGRhdGEubGlmZTtcclxuICAgICAgICBlbmVteS5tX2xpZmUgPSBkYXRhLmxpZmU7XHJcbiAgICAgICAgZW5lbXkubV9zcGVlZCA9IGRhdGEuc3BlZWQ7XHJcbiAgICAgICAgZW5lbXkubV9kYW1hZ2UgPSBkYXRhLmRhbWFnZTtcclxuICAgICAgICBlbmVteS5tX3BvaW50ID0gZGF0YS5wb2ludDtcclxuXHJcbiovXHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vT25FbmVteURlYXRoKGVuZW15LCAoRW5lbXkgZSkgPT5cclxuICAgICAgICAvL3tcclxuICAgICAgICAvLyAgICBtX2xpdmVFbmVteS0tO1xyXG4gICAgICAgIC8vfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdlbmVyYXRlRW5lbXkoKXtcclxuICAgICAgICBpZih0aGlzLm1fbGV2ZWwgPT0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9MaW5lUmFuZENyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMubV9sZXZlbCA9PSAzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy/mqKrlkJEg6ZqP5py6IFxyXG4gICAgICAgICAgICB0aGlzLmRvTGluZUNyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMubV9sZXZlbCA9PSAyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy/lj4zlkJFWXHJcbiAgICAgICAgICAgIHRoaXMuZG9WQ3JlYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5tX2xldmVsID09IDQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmRvRG90cmVhdGUoKTtcclxuICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgIGlmKHJkPjAuNzUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9Eb3RyZWF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYocmQ+MC41KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvTGluZUNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYocmQ+IDAuMjUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9WQ3JlYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9MaW5lUmFuZENyZWF0ZSgpO1xyXG4gICAgICAgICAgICB9ICAgXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgLy8gdGhpcy5kb0xpbmVDcmVhdGUoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubV9saXZlRW5lbXkrKztcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGRvRG90cmVhdGUoKXtcclxuICAgICAgICB2YXIgaDpudW1iZXIgPSBNYXRoLnJhbmRvbSgpKjkyMDtcclxuICAgICAgICB2YXIgdzpudW1iZXIgPSBNYXRoLnJhbmRvbSgpKjcyMDtcclxuICAgICAgICBsZXQgZDEgPSB0aGlzLmdldERhdGFCeUluZGV4KDQpO1xyXG4gICAgICAgIHZhciB0b3RhbDpudW1iZXIgID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjIwKTtcclxuICAgICAgICB2YXIgc3ggPSBNYXRoLnJhbmRvbSgpPjAuNT8xOi0xO1xyXG4gICAgICAgIGZvciAobGV0IG51bSA9IDA7IG51bSA8IHRvdGFsOyBudW0rKykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZ2V0RGF0YUJ5SW5kZXgoNCk7XHJcbiAgICAgICAgICAgIGRhdGEucHkgPSBoO1xyXG4gICAgICAgICAgICBkYXRhLnB4ID0gdztcclxuICAgICAgICAgICAgZGF0YS5zeCA9IHN4O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tX3RpbWVyID0gZGF0YS53YWl0OyAgICBcclxuICAgICAgICAgICAgTGF5YS50aW1lci5vbmNlKDUwMCpudW0sdGhpcyxmdW5jdGlvbihkOmFueSk6dm9pZHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlci5jcmVhdGVTcHJpdGUoZCk7XHJcbiAgICAgICAgICAgIH0sW2RhdGFdKSAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBkb1ZDcmVhdGUoKXtcclxuICAgICAgICB2YXIgaDpudW1iZXIgPSBNYXRoLnJhbmRvbSgpKjkyMDtcclxuICAgICAgICB2YXIgdzpudW1iZXIgPSBNYXRoLnJhbmRvbSgpKjcyMDtcclxuICAgICAgICBsZXQgZDEgPSB0aGlzLmdldERhdGFCeUluZGV4KDIpO1xyXG4gICAgICAgIHZhciB0b3RhbDpudW1iZXIgPSAwO1xyXG4gICAgICAgIHZhciBzdGVwOm51bWJlciA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdG90YWwgPSB3IC9kMS53O1xyXG4gICAgICAgIHN0ZXAgPSAtZDEudztcclxuICAgICAgIFxyXG4gICAgICBcclxuICAgICAgICBcclxuICAgICAgICAvL3RvdGFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnRvdGFsKTtcclxuICAgICAgICBmb3IgKGxldCBudW0gPSAwOyBudW0gPCB0b3RhbDsgbnVtKyspIHtcclxuICAgICAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmdldERhdGFCeUluZGV4KDIpO1xyXG4gICAgICAgICAgICBkYXRhLnB5ID0gaC1udW0qZDEuaDtcclxuICAgICAgICAgICAgZGF0YS5weCA9IHcrbnVtKnN0ZXA7XHJcbiAgICAgICAgICAgIHRoaXMubV90aW1lciA9IGRhdGEud2FpdDsgICAgXHJcbiAgICAgICAgICAgIExheWEudGltZXIub25jZSgyMDAqbnVtLHRoaXMsZnVuY3Rpb24oZDphbnkpOnZvaWR7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmFnZXIuY3JlYXRlU3ByaXRlKGQpO1xyXG4gICAgICAgICAgICB9LFtkYXRhXSkgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICB0b3RhbCA9ICg3MjAtdykgL2QxLnc7XHJcbiAgICAgICAgc3RlcCA9IGQxLnc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy90b3RhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp0b3RhbCk7XHJcbiAgICAgICAgZm9yIChsZXQgbnVtID0gMDsgbnVtIDwgdG90YWw7IG51bSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5nZXREYXRhQnlJbmRleCgyKTtcclxuICAgICAgICAgICAgZGF0YS5weSA9IGgtbnVtKmQxLmg7XHJcbiAgICAgICAgICAgIGRhdGEucHggPSB3K251bSpzdGVwO1xyXG4gICAgICAgICAgICB0aGlzLm1fdGltZXIgPSBkYXRhLndhaXQ7ICAgIFxyXG4gICAgICAgICAgICBMYXlhLnRpbWVyLm9uY2UoMjAwKm51bSx0aGlzLGZ1bmN0aW9uKGQ6YW55KTp2b2lke1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmNyZWF0ZVNwcml0ZShkKTtcclxuICAgICAgICAgICAgfSxbZGF0YV0pICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgZG9MaW5lUmFuZENyZWF0ZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGg6bnVtYmVyID0gTWF0aC5yYW5kb20oKSo3MjA7XHJcbiAgICAgICAgdmFyIHc6bnVtYmVyID0gTWF0aC5yYW5kb20oKSo3MjA7XHJcbiAgICAgICAgbGV0IGQxID0gdGhpcy5nZXREYXRhQnlJbmRleCgxKTtcclxuICAgICAgICB2YXIgdG90YWw6bnVtYmVyID0gMDtcclxuICAgICAgICB2YXIgc3RlcDpudW1iZXIgPSAwO1xyXG4gICAgICAgIGlmKHc+MzYwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdG90YWwgPSB3IC9kMS53O1xyXG4gICAgICAgICAgICBzdGVwID0gLWQxLnc7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0b3RhbCA9ICg3MjAtdykgL2QxLnc7XHJcbiAgICAgICAgICAgIHN0ZXAgPSBkMS53O1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdG90YWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdG90YWwpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBudW0gPSAwOyBudW0gPCB0b3RhbDsgbnVtKyspIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5nZXREYXRhQnlJbmRleCgxKTtcclxuXHJcbiAgICAgICAgICAgIGRhdGEucHkgPSBoO1xyXG4gICAgICAgICAgICBkYXRhLnB4ID0gdytudW0qc3RlcDtcclxuICAgICAgICAgICAgdGhpcy5tX3RpbWVyID0gZGF0YS53YWl0OyAgICBcclxuICAgICAgICAgICAgTGF5YS50aW1lci5vbmNlKDIwMCx0aGlzLGZ1bmN0aW9uKGQ6YW55KTp2b2lke1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmNyZWF0ZVNwcml0ZShkKTtcclxuICAgICAgICAgICAgfSxbZGF0YV0pICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRvTGluZUNyZWF0ZSgpe1xyXG4gICAgICAgIHZhciBoOm51bWJlciA9IE1hdGgucmFuZG9tKCkqNzIwO1xyXG4gICAgICAgIHZhciB3Om51bWJlciA9IE1hdGgucmFuZG9tKCkqNzIwO1xyXG4gICAgICAgIGxldCBkMSA9IHRoaXMuZ2V0RGF0YUJ5SW5kZXgoMyk7XHJcbiAgICAgICAgdmFyIHRvdGFsOm51bWJlciA9IDA7XHJcbiAgICAgICAgdmFyIHN0ZXA6bnVtYmVyID0gMDtcclxuICAgICAgICBpZih3PjM2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRvdGFsID0gdyAvZDEudztcclxuICAgICAgICAgICAgc3RlcCA9IC1kMS53O1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdG90YWwgPSAoNzIwLXcpIC9kMS53O1xyXG4gICAgICAgICAgICBzdGVwID0gZDEudztcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdG90YWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdG90YWwpO1xyXG4gICAgICAgIGxldCBsaW5lcyA9IDErIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSozKTtcclxuICAgICAgICBmb3IgKGxldCBsaW5lID0gMDsgbGluZSA8IGxpbmVzOyBsaW5lKyspIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IG51bSA9IDA7IG51bSA8IHRvdGFsOyBudW0rKykge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5nZXREYXRhQnlJbmRleCgzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhLnB5ID0gaC1saW5lKjEwMDtcclxuICAgICAgICAgICAgICAgIGRhdGEucHggPSB3K251bSpzdGVwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3RpbWVyID0gZGF0YS53YWl0OyAgICBcclxuICAgICAgICAgICAgICAgIExheWEudGltZXIub25jZShsaW5lKzIwMCx0aGlzLGZ1bmN0aW9uKGQ6YW55KTp2b2lke1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlci5jcmVhdGVTcHJpdGUoZCk7XHJcbiAgICAgICAgICAgICAgICB9LFtkYXRhXSkgICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIFxyXG5cclxuXHJcbiAgICByZWFkRGF0YSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tX2VuZW15bGlzdCA9ICBbXHJcbiAgICAgICAgICAgIHt3OjExMixoOjkyLGN4Oi0xNzIsY3k6LTE0MixweDozNjAscHk6MzAwLHN4OjAsc3k6MC44LG06MSx3YXZlOjEsZW5lbXluYW1lOlwiZW5lbXkxXCIscHJlZmFibmFtZTpcImVuZW15MVwiLGxldmVsOjEscHQ6NSxsaWZlOjgsZGFtYWdlOjEsc3BlZWQ6MSx3YWl0OjIwMDB9LFxyXG4gICAgICAgICAgICB7dzoxMTIsaDo5MixjeDotMTcyLGN5Oi0xNDIscHg6MzYwLHB5OjMwMCxzeDowLHN5OjEuMixtOjEsd2F2ZToxLGVuZW15bmFtZTpcImVuZW15MVwiLHByZWZhYm5hbWU6XCJlbmVteTFcIixsZXZlbDoxLHB0OjgsbGlmZTo0LGRhbWFnZToxLHNwZWVkOjEsd2FpdDoyMDAwfSwgICAgICAgICAgIFxyXG4gICAgICAgICAgICB7dzo3NCxoOjEwMCxjeDotMTY2LGN5Oi0xNDQscHg6MzYwLHB5OjMyMCxzeDowLHN5OjAuOCxtOjEsd2F2ZToxLGVuZW15bmFtZTpcImVuZW15MlwiLHByZWZhYm5hbWU6XCJlbmVteTJcIixsZXZlbDoyLHB0OjEwLGxpZmU6OCxkYW1hZ2U6MSxzcGVlZDoxLHdhaXQ6MzAwMH0sXHJcbiAgICAgICAgICAgIHt3Ojg4LGg6MTE2LGN4Oi0xNjYsY3k6LTE1NixweDoxNjAscHk6MzIwLHN4OjAsc3k6MC44LG06MSx3YXZlOjEsZW5lbXluYW1lOlwiZW5lbXkzXCIscHJlZmFibmFtZTpcImVuZW15M1wiLGxldmVsOjMscHQ6MTIsbGlmZTo4LGRhbWFnZToxLHNwZWVkOjEsd2FpdDo0MDAwfSwgICAgICAgICAgICBcclxuICAgICAgICAgICAge3c6ODgsaDo4OCxjeDotMTcwLGN5Oi0xNDgscHg6MTYwLHB5OjMyMCxzeDowLHN5OjAuOCxtOjEsd2F2ZToxLGVuZW15bmFtZTpcImVuZW15NFwiLHByZWZhYm5hbWU6XCJlbmVteTRcIixsZXZlbDo0LHB0OjUsbGlmZTo4LGRhbWFnZToxLHNwZWVkOjEsd2FpdDo2MDAwfSBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgXVxyXG5cclxuICAgICAgICAvL2lmICghUGxheWVyUHJlZnMuSGFzS2V5KFwibXVzaWNcIikpXHJcbiAgICAgICAgLy97XHJcbiAgICAgICAgLy8gICAgUGxheWVyUHJlZnMuU2V0SW50KFwibXVzaWNcIiwgMSk7XHJcblxyXG4gICAgICAgIC8vICAgIFBsYXllclByZWZzLlNldEludChcIm11c2ljXCIsIDApOyAgICAgICAgICAgIFxyXG4gICAgICAgIC8vfVxyXG4gICAgICAgIC8vUGxheWVyUHJlZnMuU2F2ZSgpO1xyXG5cclxuLypcclxuICAgICAgICB0aGlzLm1fZW5lbXlsaXN0WzBdID0gPHRhYmxlIG09XCIxXCIgd2F2ZT1cIjFcIiBlbmVteW5hbWU9XCJlbmVteTFcIiBwcmVmYWJuYW1lPVwiZW5lbXkxXCIgbGV2ZWw9XCIxXCIgcHQ9XCI1XCIgbGlmZT1cIjJcIiBkYW1hZ2U9XCIxXCIgc3BlZWQ9XCIxXCIgd2FpdD1cIjJcIi8+XHJcblxyXG4gICAgICAgIFhNTFBhcnNlciB4bWxwYXJzZSA9IG5ldyBYTUxQYXJzZXIoKTtcclxuICAgICAgICBYTUxOb2RlIG5vZGUgPSB4bWxwYXJzZS5QYXJzZSh4bWxkYXRhLnRleHQpO1xyXG5cclxuICAgICAgICBYTUxOb2RlTGlzdCBsaXN0ID0gbm9kZS5HZXROb2RlTGlzdChcIlJPT1Q+MD50YWJsZVwiKTtcclxuICAgICAgICBEZWJ1Zy5Mb2coXCIgbGlzdC5Db3VudCAgOlwiICsgbGlzdC5Db3VudCk7XHJcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBsaXN0LkNvdW50OyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0cmluZyB3YXZlID0gbm9kZS5HZXRWYWx1ZShcIlJPT1Q+MD50YWJsZT5cIiArIGkgKyBcIj5Ad2F2ZVwiKTtcclxuICAgICAgICAgICAgc3RyaW5nIGVuZW15bmFtZSA9IG5vZGUuR2V0VmFsdWUoXCJST09UPjA+dGFibGU+XCIgKyBpICsgXCI+QGVuZW15bmFtZVwiKTtcclxuICAgICAgICAgICAgc3RyaW5nIHByZWZhYm5hbWUgPSBub2RlLkdldFZhbHVlKFwiUk9PVD4wPnRhYmxlPlwiICsgaSArIFwiPkBwcmVmYWJuYW1lXCIpO1xyXG4gICAgICAgICAgICAvLyBwcmVmYWJuYW1lPVwiMDAyMDBcIiBsZXZlbD1cIjdcIiBwdD1cIjVcIiBsaWZlPVwiMlwiIGRhbWFnZT1cIjFcIiBzcGVlZD1cIjFcIiBcclxuICAgICAgICAgICAgc3RyaW5nIHB0ID0gbm9kZS5HZXRWYWx1ZShcIlJPT1Q+MD50YWJsZT5cIiArIGkgKyBcIj5AcHRcIik7XHJcbiAgICAgICAgICAgIHN0cmluZyBsaWZlID0gbm9kZS5HZXRWYWx1ZShcIlJPT1Q+MD50YWJsZT5cIiArIGkgKyBcIj5AbGlmZVwiKTtcclxuICAgICAgICAgICAgc3RyaW5nIGRhbWFnZSA9IG5vZGUuR2V0VmFsdWUoXCJST09UPjA+dGFibGU+XCIgKyBpICsgXCI+QGRhbWFnZVwiKTtcclxuICAgICAgICAgICAgc3RyaW5nIHNwZWVkID0gbm9kZS5HZXRWYWx1ZShcIlJPT1Q+MD50YWJsZT5cIiArIGkgKyBcIj5Ac3BlZWRcIik7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgbGV2ZWwgPSBub2RlLkdldFZhbHVlKFwiUk9PVD4wPnRhYmxlPlwiICsgaSArIFwiPkBsZXZlbFwiKTtcclxuICAgICAgICAgICAgc3RyaW5nIHdhaXQgPSBub2RlLkdldFZhbHVlKFwiUk9PVD4wPnRhYmxlPlwiICsgaSArIFwiPkB3YWl0XCIpO1xyXG5cclxuICAgICAgICAgICAgU3Bhd25EYXRhIGRhdGEgPSBuZXcgU3Bhd25EYXRhKCk7XHJcbiAgICAgICAgICAgIGRhdGEud2F2ZSA9IGludC5QYXJzZSh3YXZlKTtcclxuICAgICAgICAgICAgZGF0YS5lbmVteW5hbWUgPSBlbmVteW5hbWU7XHJcbiAgICAgICAgICAgIGRhdGEucHJlZmFibmFtZSA9IHByZWZhYm5hbWU7XHJcbiAgICAgICAgICAgIGRhdGEucG9pbnQgPSBpbnQuUGFyc2UocHQpO1xyXG4gICAgICAgICAgICBkYXRhLmxpZmUgPSBpbnQuUGFyc2UobGlmZSk7XHJcbiAgICAgICAgICAgIGRhdGEuZGFtYWdlID0gaW50LlBhcnNlKGRhbWFnZSk7XHJcbiAgICAgICAgICAgIGRhdGEuc3BlZWQgPSBpbnQuUGFyc2Uoc3BlZWQpO1xyXG4gICAgICAgICAgICBkYXRhLmxldmVsID0gaW50LlBhcnNlKGxldmVsKTtcclxuICAgICAgICAgICAgZGF0YS53YWl0ID0gZmxvYXQuUGFyc2Uod2FpdCk7XHJcblxyXG4gICAgICAgICAgICBtX2VuZW15bGlzdC5BZGQoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAqL1xyXG4gICAgfVxyXG5cclxuICAgIE9uRXZlbnQodHlwZTpzdHJpbmcsICBkYXRhOmFueSk6dm9pZFxyXG4gICAgICB7XHJcbiAgICAgICAgLy8gICBpZiAoR2FtZU1hbmFnZXIuSW5zdGFuY2UgPT0gbnVsbCB8fCBHYW1lTWFuYWdlci5JbnN0YW5jZS5nYW1lU3RhdGUgPT0gR2FtZVN0YXRlLlBhdXNlKVxyXG4gICAgICAgIC8vICAge1xyXG4gICAgICAgIC8vICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyAgIH1cclxuICBcclxuICAgICAgICAgIHRoaXMubV9saXZlRW5lbXktLTtcclxuICAgICAgICAgIGlmICggdGhpcy5tX2luZGV4ID49ICB0aGlzLm1fZW5lbXlsaXN0Lmxlbmd0aClcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLm1fbGl2ZUVuZW15ID09IDApXHJcbiAgICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hbmFnZXIgPT0gbnVsbCB8fCB0aGlzLm1hbmFnZXIuZ2FtZVN0YXRlID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmdhbWVTdGF0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLnNob3dXaW4oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvL2lmKEdhbWVNYW5hZ2VyLkluc3RhbmNlLm1fbGlmZTw9MClcclxuICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgLy8gICAgR2FtZU1hbmFnZXIuSW5zdGFuY2UuZ2FtZVN0YXRlID0gR2FtZVN0YXRlLlBhdXNlO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gICAgR2FtZU1hbmFnZXIuSW5zdGFuY2Uuc2hvd0ZhaWwoKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgIC8vfVxyXG4gICAgICB9XHJcblxyXG5cclxufVxyXG5cclxuICAgICAiLCJcclxuaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi8uLi91aS9sYXlhTWF4VUlcIjtcclxuaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuL0dhbWVNYW5hZ2VyXCI7XHJcbmltcG9ydCBTaW5nbGV0b24gZnJvbSBcIi4vU2luZ2xldGVuXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lRW5kIGV4dGVuZHMgdWkuR2FtZUVuZFVJIHsgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgXHJcbiAgICAgICAgc3VwZXIoKTsgXHJcbiAgICAgICAgdGhpcy5pbml0SGFuZGxlcigpO1xyXG4gICAgfVxyXG4gICAgaW5pdEhhbmRsZXIoKTp2b2lkXHJcbiAgICB7XHJcblxyXG5cclxuICAgICAgICB2YXIgYXJyOkFycmF5PFN0cmluZz4gPSBbXCJcIixcIuS4gFwiLFwi5LqMXCIsXCLkuIlcIixcIuWbm1wiLFwi5LqUXCIsXCLlha1cIl1cclxuICAgICAgICB2YXIgZ206R2FtZU1hbmFnZXIgPSBTaW5nbGV0b24uZ2V0SW5zdGFuY2VPckNyZWF0ZShHYW1lTWFuYWdlcik7XHJcbiAgICAgICAgdGhpcy5jb2lucy50ZXh0ID0gXCJcIitnbS5tX3BvaW50cztcclxuXHJcbiAgICAgICAgdGhpcy5sZXZlbC50ZXh0ID0gXCLnrKxcIithcnJbZ20ubV9sZXZlbCU1KzFdK1wi5YWzXCI7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmNvbnRpbnVlLm9uKGxheWEuZXZlbnRzLkV2ZW50LkNMSUNLLHRoaXMsdGhpcy5jb250aW51ZUhhbmRsZXIpO1xyXG4gICAgICAgIHRoaXMuY3Jhenkub24obGF5YS5ldmVudHMuRXZlbnQuQ0xJQ0ssdGhpcyx0aGlzLmNyYXp5SGFuZGxlcik7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgdW5MaXN0ZW4oKTp2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jb250aW51ZS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ0xJQ0ssdGhpcyx0aGlzLmNvbnRpbnVlSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5jcmF6eS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ0xJQ0ssdGhpcyx0aGlzLmNyYXp5SGFuZGxlcik7XHJcbiAgICB9XHJcbiAgICBjb250aW51ZUhhbmRsZXIoKTp2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy51bkxpc3RlbigpO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoXCJjb250aW51ZVwiKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZ206R2FtZU1hbmFnZXIgPSBTaW5nbGV0b24uZ2V0SW5zdGFuY2VPckNyZWF0ZShHYW1lTWFuYWdlcik7XHJcbiAgICAgICAgZ20uY2xvc2VHYW1lRW5kKFwiY29udGludWVcIik7XHJcblxyXG4gICAgfVxyXG4gICAgY3JhenlIYW5kbGVyKCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudW5MaXN0ZW4oKTtcclxuICAgICAgICB0aGlzLmNsb3NlKFwiY3JhenlcIik7XHJcbiAgICAgICAgdmFyIGdtOkdhbWVNYW5hZ2VyID0gU2luZ2xldG9uLmdldEluc3RhbmNlT3JDcmVhdGUoR2FtZU1hbmFnZXIpO1xyXG4gICAgICAgIGdtLmNsb3NlR2FtZUVuZChcImNyYXp5XCIpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIFxyXG4gICBcclxufSIsImltcG9ydCBHYW1lRW5kIGZyb20gXCIuL0dhbWVFbmRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVNYW5hZ2VyIGV4dGVuZHMgTGF5YS5TY3JpcHQge1xyXG4gICAgXHJcbiAgICAgICAgbV9tb2RlOm51bWJlciA9IDA7XHJcbiAgICAgICAgbV93YXZlOm51bWJlciA9IDA7XHJcbiAgICAgICAgbV9saWZlOm51bWJlciA9IDM7XHJcbiAgICAgICAgbV9wb2ludHM6bnVtYmVyID0gMDtcclxuICAgICAgICBtX2VuZXJneTpudW1iZXIgPSAwO1xyXG4gICAgICAgIGdhbWVTdGF0ZTpudW1iZXIgPTAgOy8vMCBwYXVzZSA7IDEgcnVubmluZztcclxuICAgICAgICBlbmVteUxpc3Q6QXJyYXk8YW55PiA9IFtdO1xyXG4gICAgICAgIGtpbGxlZEVuZW15TGlzdDpBcnJheTxhbnk+ID0gW107XHJcbiAgICAgICAgbV9sZXZlbDpudW1iZXIgPSAxO1xyXG4gICAgICAgIG1fcmVzZXQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIG1fbG9zZTpudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICBtX3JvdW5kOm51bWJlcj0gMDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXNldERhdGEoKTp2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm1fd2F2ZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubV9tb2RlID0gMDtcclxuICAgICAgICAgICAgdGhpcy5tX2xpZmUgPSAzO1xyXG4gICAgICAgICAgICB0aGlzLm1fcG9pbnRzID0gMDtcclxuICAgICAgICAgICAgdGhpcy5tX2VuZXJneSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlID0wIDsvLzAgcGF1c2UgOyAxIHJ1bm5pbmc7XHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlMaXN0PSBbXTtcclxuICAgICAgICAgICAgdGhpcy5raWxsZWRFbmVteUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5tX3Jlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMubV9sb3NlID0gMDtcclxuICAgICAgICAgICAgdGhpcy5tX3JvdW5kPTA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRXYXZlKHdhdmU6bnVtYmVyKTp2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm1fd2F2ZSA9IHdhdmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1dExpZmUobDpudW1iZXIpOnZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuZ2FtZVN0YXRlID09IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1fbGlmZS0tO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5tX2xpZmU8PTAgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5nYW1lU3RhdGUgPT0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGYWlsKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0QnVmZmVyTGlmZSgpOm51bWJlcntcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KFwiXCIrKHRoaXMubV9lbmVyZ3kvMTAwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRMaWZlKCk6bnVtYmVye1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubV9saWZlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGNyZWF0ZVNwcml0ZShkYXRhOmFueSk6dm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgY3JlYXRlICByb2xlXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15TGlzdC5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpbmUxKGRhdGE6YW55KTp2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwIDtpPDQ7aSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZW15TGlzdC5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZW5lbXlEaWUocHQ6YW55KTp2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmtpbGxlZEVuZW15TGlzdC5wdXNoKHB0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNob3dXaW4oKTp2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIllvdSB3aW4hXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzaG93RmFpbCgpOnZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiWW91IGZhaWzvvIFcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZU92ZXIoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkUG9pbnQocDpudW1iZXIpOnZvaWRcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1fcG9pbnRzKz1wO1xyXG4gICAgICAgICAgICB0aGlzLm1fZW5lcmd5Kz01O1xyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMubV9yb3VuZCAhPSAgcGFyc2VJbnQoXCJcIisodGhpcy5tX2VuZXJneS8xMDApKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3JvdW5kID0gcGFyc2VJbnQoXCJcIisodGhpcy5tX2VuZXJneS8xMDApKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9saWZlKys7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1fbGlmZT41KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9saWZlPTU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5tX21vZGUgPT0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2xldmVsID0gIDErcGFyc2VJbnQoXCJcIisodGhpcy5tX2VuZXJneS8xMDApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGdhbWVPdmVyKCk6dm9pZHtcclxuICAgICAgICAgICAgLy9sZXQgZ2FtZUVuZDpHYW1lRW5kID0gbmV3IEdhbWVFbmQoKTtcclxuXHJcbiAgICAgICAgICAgIExheWEuU2NlbmUub3BlbihcIkdhbWVFbmQuc2NlbmVcIixmYWxzZSk7XHJcblxyXG4gICAgICAgICAgIC8vIGdhbWVFbmQuY2xvc2VIYW5kbGVyID0gbmV3IGxheWEudXRpbHMuSGFuZGxlcih0aGlzLCB0aGlzLmNsb3NlR2FtZUVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsb3NlR2FtZUVuZChuYW1lOiBzdHJpbmcpOiB2b2lkIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgY2xvc2UgIG5hbWUgOiBcIituYW1lKTtcclxuICAgICAgICAgICBpZihuYW1lID09IFwiY29udGludWVcIilcclxuICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVzZXREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbGlmZSA9IDM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcG9pbnRzID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sZXZlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbW9kZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcmVzZXQgPSB0cnVlO1xyXG5cclxuICAgIFxyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgICBlbHNlIGlmKG5hbWUgPT0gXCJjcmF6eVwiKVxyXG4gICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbGlmZSA9IDM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcG9pbnRzID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sZXZlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbW9kZSA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3Jlc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyB1aSB9IGZyb20gXCIuLi91aS9sYXlhTWF4VUlcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVUb3BVSSBleHRlbmRzIHVpLkdhbWVUb3BVSVVJIHtcclxuXHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICBvbkVuYWJsZSgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5hdXRvRGVzdHJveUF0Q2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnN0YXJ0QnRuLm9uKGxheWEuZXZlbnRzLkV2ZW50LkNMSUNLLHRoaXMsdGhpcy5zdGFydEdhbWUpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGFydEdhbWUoKTp2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgTGF5YS5TY2VuZS5vcGVuKFwiV2FybmluZ0RpYWxvZy5zY2VuZVwiLHRydWUpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIiwiLyoqXHJcbiAqIOeIhueCuOiEmuacrCDpgLvovpHlj4rlr7nosaHmsaDlm57mlLbmnLrliLZcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlcm8gZXh0ZW5kcyBMYXlhLlNjcmlwdCB7XHJcblxyXG4gICAgc3RhdGU6bnVtYmVyID0gMTtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigpOyB9XHJcblxyXG4gICAgb25FbmFibGUoKTogdm9pZCB7XHJcbiAgICAgICB0aGlzLnN0YW5kKCk7XHJcbiAgICB9XHJcbiAgIFxyXG4gICBwdWJsaWMgc3RhbmQoKVxyXG4gICAge1xyXG4gICAgICAgXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDA7XHJcbiAgICAgICAgdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gdGhpcy5vd25lci5nZXRDaGlsZEJ5TmFtZShcImFuaVwiKSBhcyBsYXlhLmRpc3BsYXkuQW5pbWF0aW9uO1xyXG4gICAgICAgIGFuaS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLnN0YW5kKTtcclxuICAgICAgICBhbmkuaW50ZXJ2YWwgPSAxMDA7XHJcbiAgICAgICAgYW5pLnNvdXJjZSA9IFwiaGVyby9zdGFuZC9zdGFuZDAwMDAucG5nLGhlcm8vc3RhbmQvc3RhbmQwMDAxLnBuZyxoZXJvL3N0YW5kL3N0YW5kMDAwMi5wbmcsaGVyby9zdGFuZC9zdGFuZDAwMDMucG5nLGhlcm8vc3RhbmQvc3RhbmQwMDA0LnBuZ1wiO1xyXG4gICAgICAgIGFuaS5sb29wID0gdHJ1ZTtcclxuICAgICAgICBhbmkucGxheSgpO1xyXG5cclxuICAgIH1cclxuICAgIGF0dGFjaygpXHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5zdGF0ZSA9PSAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0YXRlID0gMTtcclxuICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSB0aGlzLm93bmVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgYW5pLm9mZihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuc3RhbmQpO1xyXG4gICAgICAgIGFuaS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmF0dGFja2luZyk7XHJcbiAgICAgICAgYW5pLmludGVydmFsID0gNTBcclxuICAgICAgICBhbmkuc291cmNlID0gXCJoZXJvL2F0dGFjay9hdHRhY2swMDAwLnBuZyxoZXJvL2F0dGFjay9hdHRhY2swMDAxLnBuZyxoZXJvL2F0dGFjay9hdHRhY2swMDAyLnBuZyxoZXJvL2F0dGFjay9hdHRhY2swMDAzLnBuZyxoZXJvL2F0dGFjay9hdHRhY2swMDA0LnBuZyxoZXJvL2F0dGFjay9hdHRhY2swMDA1LnBuZ1wiO1xyXG4gICAgICAgIGFuaS5sb29wID0gZmFsc2U7XHJcbiAgICAgICAgYW5pLm9uKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5hdHRhY2tpbmcpO1xyXG4gICAgICAgIGFuaS5wbGF5KCk7XHJcbiAgICAgICAgLy9hbmkub24obGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmNvbXBsZXRlUmVtb3ZlKTtcclxuICAgICAgICAvL2FuaS5vbihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLGZ1bmN0aW9uKCl7IHRoaXMub3duZXIucmVtb3ZlU2VsZigpO30pO1xyXG4gICAgfVxyXG4gICAgYXR0YWNraW5nKClcclxuICAgIHtcclxuICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSB0aGlzLm93bmVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgYW5pLm9mZihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuc3RhbmQpO1xyXG4gICAgICAgIGFuaS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmF0dGFja2luZyk7ICAgIFxyXG4gICAgICAgIGFuaS5zb3VyY2UgPSBcImhlcm8vYXR0YWNrL2F0dGFjazAwMDUucG5nXCI7XHJcbiAgICAgICAgYW5pLnN0b3AoKTtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIGF0dGFja0ZpbmlzaCgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5zdGF0ZSA9PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0YXRlID0gMDtcclxuICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSB0aGlzLm93bmVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgYW5pLm9mZihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuc3RhbmQpO1xyXG4gICAgICAgIGFuaS5vZmYobGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmF0dGFja2luZyk7ICAgICAgXHJcbiAgICAgICAgYW5pLmludGVydmFsID0gNTA7XHJcbiAgICAgICAgYW5pLnNvdXJjZSA9IFwiaGVyby9hdHRhY2svYXR0YWNrMDAwNi5wbmcsaGVyby9hdHRhY2svYXR0YWNrMDAwNy5wbmcsaGVyby9hdHRhY2svYXR0YWNrMDAwOC5wbmcsaGVyby9hdHRhY2svYXR0YWNrMDAwOS5wbmcsaGVyby9hdHRhY2svYXR0YWNrMDAxMC5wbmcsaGVyby9hdHRhY2svYXR0YWNrMDAxMS5wbmcsaGVyby9hdHRhY2svYXR0YWNrMDAxMi5wbmdcIjtcclxuICAgICAgICBhbmkubG9vcCA9IGZhbHNlO1xyXG4gICAgICAgIGFuaS5vbihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuc3RhbmQpO1xyXG4gICAgICAgXHJcbiAgICAgICAgYW5pLnBsYXkoKTtcclxuICAgICAgICAvL2FuaS5vbihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLGZ1bmN0aW9uKCl7IHRoaXMub3duZXIucmVtb3ZlU2VsZigpO30pO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIG9uRGlzYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICAvL+WtkOW8ueiiq+enu+mZpOaXtu+8jOWbnuaUtuWtkOW8ueWIsOWvueixoeaxoO+8jOaWueS+v+S4i+asoeWkjeeUqO+8jOWHj+WwkeWvueixoeWIm+W7uuW8gOmUgFxyXG4gICAgICAgIExheWEuUG9vbC5yZWNvdmVyKFwiSGVyb1wiLCB0aGlzLm93bmVyKTtcclxuICAgIH1cclxufSIsIi8qKlxyXG4gKiDniIbngrjohJrmnKwg6YC76L6R5Y+K5a+56LGh5rGg5Zue5pS25py65Yi2XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW5lRG90IGV4dGVuZHMgTGF5YS5TY3JpcHQge1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoKTsgfVxyXG5cclxuICAgIG9uRW5hYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8v6K6+572u5Yid5aeL6YCf5bqmXHJcbiAgICAgICAgdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gdGhpcy5vd25lci5nZXRDaGlsZEJ5TmFtZShcImFuaVwiKSBhcyBsYXlhLmRpc3BsYXkuQW5pbWF0aW9uO1xyXG4gICAgICAgIC8vYW5pLnNvdXJjZSA9XCJib29tMS9maXJlX2FfMDAwMDEucG5nLGJvb20xL2ZpcmVfYV8wMDAwMi5wbmcsYm9vbTEvZmlyZV9hXzAwMDAzLnBuZyxib29tMS9maXJlX2FfMDAwMDQucG5nLGJvb20xL2ZpcmVfYV8wMDAwNS5wbmcsYm9vbTEvZmlyZV9hXzAwMDA2LnBuZyxib29tMS9maXJlX2FfMDAwMDcucG5nLGJvb20xL2ZpcmVfYV8wMDAwOC5wbmcsYm9vbTEvZmlyZV9hXzAwMDA5LnBuZyxib29tMS9maXJlX2FfMDAwMTAucG5nXCJcclxuICAgICAgICBhbmkub2ZmKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5jb21wbGV0ZVJlbW92ZSk7XHJcbiAgICAgICAgYW5pLmxvb3AgPSBmYWxzZTtcclxuICAgICAgICBhbmkub24obGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmNvbXBsZXRlUmVtb3ZlKTtcclxuICAgIH1cclxuICAgIGNvbXBsZXRlUmVtb3ZlKClcclxuICAgIHsgXHJcbiAgICAgICAgdGhpcy5vd25lci5yZW1vdmVTZWxmKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXRTb3VyY2VzKClcclxuICAgIHtcclxuICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSB0aGlzLm93bmVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgYW5pLm9mZihsYXlhLmV2ZW50cy5FdmVudC5DT01QTEVURSx0aGlzLHRoaXMuY29tcGxldGVSZW1vdmUpO1xyXG4gICAgICAgLy8gYW5pLnNvdXJjZSA9IFwiZmlyZTEvYjEucG5nLGZpcmUxL2IyLnBuZyxmaXJlMS9iMy5wbmcsZmlyZTEvYjQucG5nLGZpcmUxL2I1LnBuZyxmaXJlMS9iNi5wbmcsZmlyZTEvYjcucG5nLGZpcmUxL2I4LnBuZ1wiO1xyXG4gICAgICAgIGFuaS5sb29wID0gZmFsc2U7XHJcbiAgICAgICAgYW5pLm9uKGxheWEuZXZlbnRzLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5jb21wbGV0ZVJlbW92ZSk7XHJcbiAgICAgICAgLy9hbmkub24obGF5YS5ldmVudHMuRXZlbnQuQ09NUExFVEUsdGhpcyxmdW5jdGlvbigpeyB0aGlzLm93bmVyLnJlbW92ZVNlbGYoKTt9KTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICBvbkRpc2FibGUoKTogdm9pZCB7XHJcbiAgICAgICAgLy/lrZDlvLnooqvnp7vpmaTml7bvvIzlm57mlLblrZDlvLnliLDlr7nosaHmsaDvvIzmlrnkvr/kuIvmrKHlpI3nlKjvvIzlh4/lsJHlr7nosaHliJvlu7rlvIDplIBcclxuICAgICAgICBMYXlhLlBvb2wucmVjb3ZlcihcIkxpbmVEb3RcIiwgdGhpcy5vd25lcik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyB1aSB9IGZyb20gXCIuLy4uL3VpL2xheWFNYXhVSVwiO1xyXG5pbXBvcnQgV2FybmluZ0RpYWxvZyBmcm9tIFwiLi9XYXJuaW5nRGlhbG9nXCI7XHJcbmltcG9ydCBTY2VuZUNvbnRyb2wgZnJvbSBcIi4vU2NlbmVDb250cm9sXCI7XHJcbmltcG9ydCBCb29tIGZyb20gXCIuL0Jvb21cIjtcclxuaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuL0dhbWVNYW5hZ2VyXCI7XHJcbmltcG9ydCBTaW5nbGV0b24gZnJvbSBcIi4vU2luZ2xldGVuXCI7XHJcbmltcG9ydCBFbmVteTEgZnJvbSBcIi4vRW5lbXkxXCI7XHJcbmltcG9ydCBHYW1lRGF0YSBmcm9tIFwiLi9HYW1lRGF0YVwiO1xyXG5pbXBvcnQgQW5pSW5zdCBmcm9tIFwiLi9BbmlJbnN0XCI7XHJcbmltcG9ydCBIZXJvIGZyb20gXCIuL0hlcm9cIjtcclxuaW1wb3J0IFNoYWtlQ2xzIGZyb20gXCIuL1NoYWtlQ2xzXCI7XHJcbmltcG9ydCBHYW1lRW5kIGZyb20gXCIuL0dhbWVFbmRcIjtcclxuLyoqXHJcbiAqIOacrOekuuS+i+mHh+eUqOmdnuiEmuacrOeahOaWueW8j+WunueOsO+8jOiAjOS9v+eUqOe7p+aJv+mhtemdouWfuuexu++8jOWunueOsOmhtemdoumAu+i+keOAguWcqElERemHjOmdouiuvue9ruWcuuaZr+eahFJ1bnRpbWXlsZ7mgKfljbPlj6/lkozlnLrmma/ov5vooYzlhbPogZRcclxuICog55u45q+U6ISa5pys5pa55byP77yM57un5om/5byP6aG16Z2i57G777yM5Y+v5Lul55u05o6l5L2/55So6aG16Z2i5a6a5LmJ55qE5bGe5oCn77yI6YCa6L+HSURF5YaFdmFy5bGe5oCn5a6a5LmJ77yJ77yM5q+U5aaCdGhpcy50aXBMYmxs77yMdGhpcy5zY29yZUxibO+8jOWFt+acieS7o+eggeaPkOekuuaViOaenFxyXG4gKiDlu7rorq7vvJrlpoLmnpzmmK/pobXpnaLnuqfnmoTpgLvovpHvvIzpnIDopoHpopHnuYHorr/pl67pobXpnaLlhoXlpJrkuKrlhYPntKDvvIzkvb/nlKjnu6fmib/lvI/lhpnms5XvvIzlpoLmnpzmmK/ni6znq4vlsI/mqKHlnZfvvIzlip/og73ljZXkuIDvvIzlu7rorq7nlKjohJrmnKzmlrnlvI/lrp7njrDvvIzmr5TlpoLlrZDlvLnohJrmnKzjgIJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRTY2VuZSBleHRlbmRzIHVpLkxvYWRTY2VuZVVJIHtcclxuICAgXHJcbiAgICBwdWJsaWMgcG9pbnRzOkFycmF5PGFueT4gPSBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBiTW91c2VEb3duOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBiQnVmZmVyRG93bjpib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHVibGljIGJBdHRhY2s6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyBsYXN0WDpudW1iZXIgPSAwO1xyXG5cclxuICAgIHB1YmxpYyBsYXN0WTpudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgY291bnQ6bnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIF9jb250cm9sOlNjZW5lQ29udHJvbDtcclxuICAgIHByaXZhdGUgX2dhbWVEYXRhOkdhbWVEYXRhO1xyXG5cclxuICAgIHByaXZhdGUgZnJvbVg6bnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgZnJvbVk6bnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgbUhlcm86SGVybztcclxuXHJcbiAgICBwcml2YXRlIHNoYWtlOlNoYWtlQ2xzO1xyXG5cclxuICAgIHByaXZhdGUgY3VyTGlmZTpudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBhbmkxOkFuaUluc3Q7XHJcbiAgICBwcml2YXRlIGFuaTI6QW5pSW5zdDtcclxuICAgIHByaXZhdGUgYW5pMzpBbmlJbnN0O1xyXG5cclxuICAgIHByaXZhdGUgbG9uZ0FycjpBcnJheTxBbmlJbnN0PjtcclxuICAgIHByaXZhdGUgbG9uZ0NvdW50ZXI6bnVtYmVyPTA7XHJcblxyXG4gICAgcHJpdmF0ZSBiQnVmZmVyMTpib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBiQnVmZmVyMjpib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBiQnVmZmVyMzpib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBiQnVmZmVyMVJlYWR5OmJvb2xlYW47XHJcbiAgICBwcml2YXRlIGJCdWZmZXIyUmVhZHk6Ym9vbGVhbjtcclxuICAgIHByaXZhdGUgYkJ1ZmZlcjNSZWFkeTpib29sZWFuO1xyXG4gICAgcHJpdmF0ZSB1c2VkRW5lcmd5Om51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIGN1ckJ1ZmZlcjpTdHJpbmcgPVwiXCJcclxuXHJcblxyXG4gICAgcHJpdmF0ZSBidWxsZXRBcnI6QXJyYXk8YW55PjtcclxuXHJcblxyXG4gICAgXHJcbiAgICBcclxuXHJcbiAgICBwcml2YXRlIG1hbmFnZXI6R2FtZU1hbmFnZXIgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zaGFrZSA9IG5ldyBTaGFrZUNscygpXHJcbiAgICAgICAgR2FtZURhdGEuZ19zaGFyZWRHYW1lTGF5ZXIgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucG9pbnRzID0gW107XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicHRzIGxlbmd0aDogXCIrdGhpcy5wb2ludHMubGVuZ3RoKTtcclxuICAgICAgICAvL+WFs+mXreWkmueCueinpuaOp++8jOWQpuWImeWwseaXoOaVjOS6hlxyXG4gICAgICAgIExheWEuTW91c2VNYW5hZ2VyLm11bHRpVG91Y2hFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fZ2FtZURhdGEgPSB0aGlzLmdldENvbXBvbmVudChHYW1lRGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5mcm9tWCA9IHRoaXMuaGl0Lng7XHJcbiAgICAgICAgdGhpcy5mcm9tWSA9IHRoaXMuaGl0Lnk7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyID0gU2luZ2xldG9uLmdldEluc3RhbmNlT3JDcmVhdGUoR2FtZU1hbmFnZXIpOyAgIFxyXG4gICAgICAgIHRoaXMuY3VyTGlmZSA9IHRoaXMubWFuYWdlci5tX2xpZmU7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmdhbWVTdGF0ZSA9IDE7XHJcbiAgICAgICAgdGhpcy5tSGVybyA9IHRoaXMuaGVyby5nZXRDb21wb25lbnQoSGVybyk7XHJcbiAgICAgICAgdGhpcy5kcmF3U3AuYWxwaGEgPSAwLjI7XHJcbiAgICAgICAgdGhpcy5hbmkxID0gbmV3IEFuaUluc3QoKTsgICAgICAgIFxyXG4gICAgICAgIHRoaXMuYW5pMiA9IG5ldyBBbmlJbnN0KCk7XHJcbiAgICAgICAgdGhpcy5hbmkzID0gbmV3IEFuaUluc3QoKTtcclxuICAgICAgICB0aGlzLmFuaTEueSA9IDIwMDA7XHJcbiAgICAgICAgdGhpcy5hbmkyLnkgPSAyMDAwO1xyXG4gICAgICAgIHRoaXMuYW5pMy55ID0gMjAwMDtcclxuICAgICAgICB0aGlzLmJCdWZmZXIxID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5iQnVmZmVyMiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYkJ1ZmZlcjMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJCdWZmZXIxUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJCdWZmZXIyUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJCdWZmZXIzUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnVzZWRFbmVyZ3kgPSAwO1xyXG4gICAgICAgIHRoaXMubG9uZ0FyciA9IG5ldyBBcnJheTxBbmlJbnN0PigpO1xyXG4gICAgICAgIHRoaXMuYnVsbGV0QXJyID0gbmV3IEFycmF5PGFueT4oKTtcclxuICAgICAgICBMYXlhLnRpbWVyLmxvb3AoMTAwMC82MCx0aGlzLHRoaXMubG9vcDYwKTtcclxuICAgICAgXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldE1hbmFnZXIoKTpHYW1lTWFuYWdlclxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMubWFuYWdlciA9PSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyID0gU2luZ2xldG9uLmdldEluc3RhbmNlT3JDcmVhdGUoR2FtZU1hbmFnZXIpOyAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRW5hYmxlKCk6IHZvaWQge1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5idWZmZXIxLm9uKExheWEuRXZlbnQuTU9VU0VfRE9XTix0aGlzLHRoaXMuYnVmZmVySGFuZGxlcilcclxuICAgICAgICB0aGlzLmJ1ZmZlcjIub24oTGF5YS5FdmVudC5NT1VTRV9ET1dOLHRoaXMsdGhpcy5idWZmZXJIYW5kbGVyKVxyXG4gICAgICAgIHRoaXMuYnVmZmVyMy5vbihMYXlhLkV2ZW50Lk1PVVNFX0RPV04sdGhpcyx0aGlzLmJ1ZmZlckhhbmRsZXIpXHJcblxyXG4gICAgICAgIHRoaXMuYnVmZmVyMS5oaXRBcmVhID0gbmV3IExheWEuUmVjdGFuZ2xlKC00MCwtMjAgLDEyMCw4MCk7XHJcbiAgICAgICAgdGhpcy5idWZmZXIyLmhpdEFyZWEgPSBuZXcgTGF5YS5SZWN0YW5nbGUoLTQwLC0yMCAsMTIwLDgwKTtcclxuICAgICAgICB0aGlzLmJ1ZmZlcjMuaGl0QXJlYSA9IG5ldyBMYXlhLlJlY3RhbmdsZSgtNDAsLTIwICwxMjAsODApO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5vbihMYXlhLkV2ZW50Lk1PVVNFX0RPV04sIHRoaXMsIHRoaXMuZHJhd0Rvd24pO1xyXG4gICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSB0aGlzLmdldENvbXBvbmVudChTY2VuZUNvbnRyb2wpO1xyXG4gICAgICAgXHJcbiAgICAgICAgLy8gdGhpcy5sb2FkaW5nLm9uKExheWEuRXZlbnQuQ0xJQ0ssIHRoaXMsIHRoaXMub25UaXBDbGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgYnVmZmVySGFuZGxlcihlOkxheWEuRXZlbnQpXHJcbiAgICB7XHJcblxyXG4gICAgICAgIGlmKGUudGFyZ2V0Lm5hbWUgPT0gXCJidWZmZXIxXCIgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy51c2VkRW5lcmd5ICs9IDMwO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGUudGFyZ2V0Lm5hbWUgPT0gXCJidWZmZXIyXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVzZWRFbmVyZ3kgKz0gNzU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoZS50YXJnZXQubmFtZSA9PSBcImJ1ZmZlcjNcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlZEVuZXJneSArPSAxNTA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uKExheWEuRXZlbnQuTU9VU0VfTU9WRSwgdGhpcywgdGhpcy5CdWZmZXJNb3ZlKTtcclxuICAgICAgICB0aGlzLm9uKExheWEuRXZlbnQuTU9VU0VfVVAsIHRoaXMsIHRoaXMuYnVmZmVyVXApO1xyXG4gICAgICAgIHRoaXMub24oTGF5YS5FdmVudC5NT1VTRV9PVVQsIHRoaXMsIHRoaXMuYnVmZmVyVXApO1xyXG5cclxuICAgICAgICB0aGlzLmJCdWZmZXJEb3duID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5idWZmZXJJY29uLnggPSBMYXlhLnN0YWdlLm1vdXNlWC0xNjc7XHJcbiAgICAgICAgdGhpcy5idWZmZXJJY29uLnkgPSBMYXlhLnN0YWdlLm1vdXNlWS0xMjU7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jdXJCdWZmZXIgPSBlLnRhcmdldC5uYW1lO1xyXG5cclxuICAgICAgICBcclxuICAgIH1cclxuICAgIEJ1ZmZlck1vdmUoKVxyXG4gICAge1xyXG5cclxuICAgICAgICBpZih0aGlzLmJCdWZmZXJEb3duKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXJJY29uLnggPSBMYXlhLnN0YWdlLm1vdXNlWC0xNjc7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVySWNvbi55ID0gTGF5YS5zdGFnZS5tb3VzZVktMTI1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBidWZmZXJVcCgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5iQnVmZmVyRG93bilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgaWYodGhpcy5jdXJCdWZmZXIgPT0gXCJidWZmZXIxXCIpXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaTE6QW5pSW5zdCA9IEFuaUluc3QuZ2V0T3JDcmVhdGUoe3g6TGF5YS5zdGFnZS5tb3VzZVgseTpMYXlhLnN0YWdlLm1vdXNlWX0pO1xyXG4gICAgICAgICAgICAgICAgLy8gYW5pMS54ID0gIExheWEuc3RhZ2UubW91c2VYO1xyXG4gICAgICAgICAgICAgICAgLy8gYW5pMS55ID0gTGF5YS5zdGFnZS5tb3VzZVk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvbmdBcnIucHVzaChhbmkxKTtcclxuICAgICAgICAgICAgICAgIGFuaTEuY291bnRlciA9IDA7XHJcbiAgICAgICAgICAgICAgICBhbmkxLm5hbWUgPSBcImxvbmcxXCI7XHJcbiAgICAgICAgICAgICAgICBHYW1lRGF0YS5nX3NoYXJlZEdhbWVMYXllci5hZGRMaWdodDIoYW5pMSk7XHJcbiAgICAgICAgICAgICAgICBhbmkxLnBsYXlVcmwoXCJndWFyZGlhbi5hdGxhc1wiLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgLy9MYXlhLnRpbWVyLmxvb3AoMjAwLHRoaXMsdGhpcy5hbmkxSGFuZGxlcixbYW5pMV0pO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYodGhpcy5jdXJCdWZmZXIgPT0gXCJidWZmZXIyXCIpXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgYW5pMTpBbmlJbnN0ID0gQW5pSW5zdC5nZXRPckNyZWF0ZSh7eDpMYXlhLnN0YWdlLm1vdXNlWCx5OkxheWEuc3RhZ2UubW91c2VZfSk7XHJcbiAgICAgICAgICAgIC8vIGFuaTEueCA9ICBMYXlhLnN0YWdlLm1vdXNlWDtcclxuICAgICAgICAgICAgLy8gYW5pMS55ID0gTGF5YS5zdGFnZS5tb3VzZVk7XHJcbiAgICAgICAgICAgIHRoaXMubG9uZ0Fyci5wdXNoKGFuaTEpO1xyXG4gICAgICAgICAgICBhbmkxLmNvdW50ZXIgPSAwO1xyXG4gICAgICAgICAgICBhbmkxLm5hbWUgPSBcImxvbmcyXCI7XHJcbiAgICAgICAgICAgIEdhbWVEYXRhLmdfc2hhcmVkR2FtZUxheWVyLmFkZExpZ2h0MihhbmkxKTtcclxuICAgICAgICAgICAgYW5pMS5wbGF5VXJsKFwiZ3VhcmRpYW4uYXRsYXNcIix0cnVlKTtcclxuICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgIGVsc2UgaWYodGhpcy5jdXJCdWZmZXIgPT0gXCJidWZmZXIzXCIpXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLmFuaTMueCA9ICBMYXlhLnN0YWdlLm1vdXNlWDtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5hbmkzLnkgPSBMYXlhLnN0YWdlLm1vdXNlWTtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5hbmkzLmNvdW50ZXIgPSAwO1xyXG4gICAgICAgICAgICAvLyAgICBHYW1lRGF0YS5nX3NoYXJlZEdhbWVMYXllci5hZGRMaWdodDIodGhpcy5hbmkzKTtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5hbmkzLnBsYXlVcmwoXCJndWFyZGlhbi5hdGxhc1wiLHRydWUpO1xyXG4gICAgICAgICAgICAvLyAgICBMYXlhLnRpbWVyLmxvb3AoMjAwLHRoaXMsdGhpcy5hbmkzSGFuZGxlcixbdGhpcy5hbmkzXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5pMTpBbmlJbnN0ID0gQW5pSW5zdC5nZXRPckNyZWF0ZSh7eDpMYXlhLnN0YWdlLm1vdXNlWCx5OkxheWEuc3RhZ2UubW91c2VZfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmkxLnggPSAgTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmkxLnkgPSBMYXlhLnN0YWdlLm1vdXNlWTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9uZ0Fyci5wdXNoKGFuaTEpO1xyXG4gICAgICAgICAgICAgICAgYW5pMS5jb3VudGVyID0gMDtcclxuICAgICAgICAgICAgICAgIGFuaTEubmFtZSA9IFwibG9uZzNcIjtcclxuICAgICAgICAgICAgICAgIEdhbWVEYXRhLmdfc2hhcmVkR2FtZUxheWVyLmFkZExpZ2h0MihhbmkxKTtcclxuICAgICAgICAgICAgICAgIGFuaTEucGxheVVybChcImd1YXJkaWFuLmF0bGFzXCIsdHJ1ZSk7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIHRoaXMuY3VyQnVmZmVyID09IFwiXCI7XHJcbiAgICAgICAgICAgdGhpcy5iQnVmZmVyRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgIHRoaXMuYnVmZmVySWNvbi55PS0xNTAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb25nQXJySGFuZGxlcigpe1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5sb25nQXJyLmxlbmd0aC0xOyBpbmRleCA+LTE7IGluZGV4LS0pe1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5sb25nQXJyW2luZGV4XTtcclxuICAgICAgICAgICAgaWYoZWxlbWVudC5uYW1lID09IFwibG9uZzFcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmkxSGFuZGxlcihlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGVsZW1lbnQubmFtZSA9PSBcImxvbmcyXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pMkhhbmRsZXIoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihlbGVtZW50Lm5hbWUgPT0gXCJsb25nM1wiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuaTNIYW5kbGVyKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgYW5pMUhhbmRsZXIoYW5pOkFuaUluc3QpXHJcbiAgICB7XHJcbiAgICAgICAgYW5pLmNvdW50ZXIrKztcclxuICAgICAgICBpZihhbmkuY291bnRlcjw2MCAmJiB0aGlzLmdldE1hbmFnZXIoKS5nYW1lU3RhdGUgPT0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiIGNyZWF0ZSAgYm9vb20gXCIrIGFuaS5jb3VudGVyKTtcclxuICAgICAgICAgICAgLy9sZXQgZmx5ZXI6IExheWEuU3ByaXRlID0gTGF5YS5Qb29sLmdldEl0ZW1CeUNyZWF0ZUZ1bihcIkZsYW1lXCIsIHRoaXMuX2NvbnRyb2wuZmxhbWUuY3JlYXRlLCB0aGlzLl9jb250cm9sLmZsYW1lKTtcclxuICAgICAgICAgICAgLy8gdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gIGZseWVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgICAgIC8vIGFuaS5wbGF5KDApO1xyXG4gICAgICAgICAgICB2YXIgdGw6TGF5YS5BbmltYXRpb24gPSBuZXcgTGF5YS5BbmltYXRpb24oKTtcclxuICAgICAgICAgICAgLy/liqDovb3liqjnlLvmlofku7ZcclxuICAgICAgICAgICAgdGwubG9hZEFuaW1hdGlvbihcIkZpcmVGbGFtZS5hbmlcIik7XHJcbiAgICAgICAgICAgIHRsLnggPSBhbmkueDtcclxuICAgICAgICAgICAgdGwueSA9IGFuaS55LTgwO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldEFyci5wdXNoKHRsKTtcclxuICAgICAgICAgICAgdGhpcy5fZ2FtZUJveC5hZGRDaGlsZCh0bCk7XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgYW5pLnkgPSAyMDAwO1xyXG4gICAgICAgICAgICBhbmkuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRlbExvbmdBcnIoYW5pKTtcclxuICAgICAgICB9ICAgXHJcblxyXG4gICAgfVxyXG4gICAgYW5pMkhhbmRsZXIoYW5pOkFuaUluc3QpXHJcbiAgICB7XHJcbiAgICAgICAgYW5pLmNvdW50ZXIrKztcclxuICAgICAgICBpZihhbmkuY291bnRlcjw5MCAmJiB0aGlzLmdldE1hbmFnZXIoKS5nYW1lU3RhdGUgPT0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiIGNyZWF0ZSAgYm9vb20gXCIrIGFuaS5jb3VudGVyKTtcclxuICAgICAgICAgICAgdmFyIHRsOkxheWEuQW5pbWF0aW9uID0gbmV3IExheWEuQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIC8v5Yqg6L295Yqo55S75paH5Lu2XHJcbiAgICAgICAgICAgIHRsLmxvYWRBbmltYXRpb24oXCJGaXJlRmxhbWUuYW5pXCIpO1xyXG4gICAgICAgICAgICB0bC54ID0gYW5pLngtMjA7XHJcbiAgICAgICAgICAgIHRsLnkgPSBhbmkueS04MDtcclxuICAgICAgICAgICAgdGhpcy5idWxsZXRBcnIucHVzaCh0bCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVCb3guYWRkQ2hpbGQodGwpO1xyXG5cclxuICAgICAgICAgICAgdGwgPSBuZXcgTGF5YS5BbmltYXRpb24oKTtcclxuICAgICAgICAgICAgLy/liqDovb3liqjnlLvmlofku7ZcclxuICAgICAgICAgICAgdGwubG9hZEFuaW1hdGlvbihcIkZpcmVGbGFtZS5hbmlcIik7XHJcbiAgICAgICAgICAgIHRsLnggPSBhbmkueCsyMDtcclxuICAgICAgICAgICAgdGwueSA9IGFuaS55LTgwO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldEFyci5wdXNoKHRsKTtcclxuICAgICAgICAgICAgdGhpcy5fZ2FtZUJveC5hZGRDaGlsZCh0bCk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBhbmkueSA9IDIwMDA7XHJcbiAgICAgICAgICAgIGFuaS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVsTG9uZ0FycihhbmkpO1xyXG4gICAgICAgIH0gICBcclxuXHJcbiAgICB9XHJcbiAgICBhbmkzSGFuZGxlcihhbmk6QW5pSW5zdClcclxuICAgIHtcclxuICAgICAgICBhbmkuY291bnRlcisrO1xyXG4gICAgICAgIGlmKGFuaS5jb3VudGVyPDEyMCAmJiB0aGlzLmdldE1hbmFnZXIoKS5nYW1lU3RhdGUgPT0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiIGNyZWF0ZSAgYm9vb20gXCIrIGFuaS5jb3VudGVyKTtcclxuICAgICAgICAgICAgdmFyIHRsOkxheWEuQW5pbWF0aW9uID0gbmV3IExheWEuQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIC8v5Yqg6L295Yqo55S75paH5Lu2XHJcbiAgICAgICAgICAgIHRsLmxvYWRBbmltYXRpb24oXCJGaXJlRmxhbWUuYW5pXCIpO1xyXG4gICAgICAgICAgICB0bC54ID0gYW5pLngtMzA7XHJcbiAgICAgICAgICAgIHRsLnkgPSBhbmkueS04MDtcclxuICAgICAgICAgICAgdGhpcy5idWxsZXRBcnIucHVzaCh0bCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVCb3guYWRkQ2hpbGQodGwpO1xyXG5cclxuICAgICAgICAgICAgdGwgPSBuZXcgTGF5YS5BbmltYXRpb24oKTtcclxuICAgICAgICAgICAgLy/liqDovb3liqjnlLvmlofku7ZcclxuICAgICAgICAgICAgdGwubG9hZEFuaW1hdGlvbihcIkZpcmVGbGFtZS5hbmlcIik7XHJcbiAgICAgICAgICAgIHRsLnggPSBhbmkueCszMDtcclxuICAgICAgICAgICAgdGwueSA9IGFuaS55LTgwO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldEFyci5wdXNoKHRsKTtcclxuICAgICAgICAgICAgdGhpcy5fZ2FtZUJveC5hZGRDaGlsZCh0bCk7XHJcblxyXG4gICAgICAgICAgICB0bCA9IG5ldyBMYXlhLkFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAvL+WKoOi9veWKqOeUu+aWh+S7tlxyXG4gICAgICAgICAgICB0bC5sb2FkQW5pbWF0aW9uKFwiRmlyZUZsYW1lLmFuaVwiKTtcclxuICAgICAgICAgICAgdGwueCA9IGFuaS54O1xyXG4gICAgICAgICAgICB0bC55ID0gYW5pLnktODA7XHJcbiAgICAgICAgICAgIHRoaXMuYnVsbGV0QXJyLnB1c2godGwpO1xyXG4gICAgICAgICAgICB0aGlzLl9nYW1lQm94LmFkZENoaWxkKHRsKTtcclxuXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGFuaS55ID0gMjAwMDtcclxuICAgICAgICAgICAgYW5pLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5kZWxMb25nQXJyKGFuaSk7XHJcbiAgICAgICAgfSAgIFxyXG5cclxuICAgIH1cclxuXHJcbiAgICBkZWxMb25nQXJyKGFuaTpBbmlJbnN0KXtcclxuICAgICAgICB2YXIgb3JkZXIgPSB0aGlzLmxvbmdBcnIuaW5kZXhPZihhbmkpO1xyXG4gICAgICAgIGlmKG9yZGVyIT0tMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubG9uZ0Fyci5zcGxpY2Uob3JkZXIsMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNjYWxlVG9PbmUoYnRuOkxheWEuQnV0dG9uKTp2b2lke1xyXG4gICAgICAgIGJ0bi5zY2FsZVggPSAxO1xyXG4gICAgICAgIGJ0bi5zY2FsZVkgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVVJKCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMuZ2V0TWFuYWdlcigpLmdldExpZmUoKSAhPSAgdGhpcy5jdXJMaWZlICApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmN1ckxpZmUgPSB0aGlzLm1hbmFnZXIuZ2V0TGlmZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNoYWtlLmhpdEFuZFNoYWtlKHRoaXMsMjAsMjApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1Db2luLnRleHQgPSBcIlwiKyB0aGlzLmdldE1hbmFnZXIoKS5tX3BvaW50cztcclxuXHJcbiAgICAgICAgdGhpcy5wcm9ncmVzcy52YWx1ZSA9IHRoaXMuZ2V0TWFuYWdlcigpLm1fZW5lcmd5JTEwMC8xMDA7XHJcblxyXG4gICAgICAgIHZhciBjdXJFbmVyZ3k6bnVtYmVyID0gdGhpcy5nZXRNYW5hZ2VyKCkubV9lbmVyZ3ktdGhpcy51c2VkRW5lcmd5O1xyXG5cclxuICAgICAgICB0aGlzLnRvcFByb2dyZXNzLnZhbHVlID0gY3VyRW5lcmd5LzE1MDtcclxuXHJcbiAgICAgICAgaWYoY3VyRW5lcmd5Pj0zMClcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcjEuZ3JheSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcjEuZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmKE1hdGgucmFuZG9tKCk+MC45NSl7XHJcblxyXG4gICAgICAgICAgICAgICAgTGF5YS5Ud2Vlbi50byh0aGlzLmJ1ZmZlcjEse1wicm90YXRpb25cIjo3MjAsc2NhbGVYOjEuNSxzY2FsZVk6MS41fSw1MDAsXHJcbiAgICAgICAgICAgICAgICBudWxsLExheWEuSGFuZGxlci5jcmVhdGUodGhpcyx0aGlzLnNjYWxlVG9PbmUsW3RoaXMuYnVmZmVyMV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcjEuZ3JheSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyMS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCBjdXJFbmVyZ3k+PTc1KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIyLmdyYXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIyLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmKE1hdGgucmFuZG9tKCk+MC45NSl7XHJcblxyXG4gICAgICAgICAgICAgICAgTGF5YS5Ud2Vlbi50byh0aGlzLmJ1ZmZlcjIse1wicm90YXRpb25cIjo3MjAsc2NhbGVYOjEuMyxzY2FsZVk6MS4zfSw1MDAsXHJcbiAgICAgICAgICAgICAgICBudWxsLExheWEuSGFuZGxlci5jcmVhdGUodGhpcyx0aGlzLnNjYWxlVG9PbmUsW3RoaXMuYnVmZmVyMl0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcjIuZ3JheSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyMi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGN1ckVuZXJneT49MTUwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyMy5ncmF5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyMy5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZihNYXRoLnJhbmRvbSgpPjAuOTUpe1xyXG5cclxuICAgICAgICAgICAgICAgIExheWEuVHdlZW4udG8odGhpcy5idWZmZXIzLHtcInJvdGF0aW9uXCI6NzIwLHNjYWxlWDoxLjMsc2NhbGVZOjEuM30sNTAwLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsdGhpcy5zY2FsZVRvT25lLFt0aGlzLmJ1ZmZlcjNdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyMy5ncmF5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIzLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcblxyXG5cclxuICAgICAgICB2YXIgbGlmZSA9IHRoaXMuZ2V0TWFuYWdlcigpLmdldExpZmUoKTtcclxuICAgICAgICBmb3IodmFyIGk9MTtpPDY7aSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoaTw9IGxpZmUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXNbXCJsaWZlXCIraV0udmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzW1wibGlmZVwiK2ldLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLl9nYW1lRGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVEYXRhLnJlc2V0RGF0YSgpO1xyXG4gICAgICAgIH0gICBcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbG9vcDYwKCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCB0aGlzLm1hbmFnZXIubV9yZXNldClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRHYW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5tX3Jlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKCB0aGlzLm1hbmFnZXIuZ2FtZVN0YXRlICE9IDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVVJKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9nYW1lQm94LmdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Qm94LmdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVCb3gucmVtb3ZlQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvbmdDb3VudGVyKys7XHJcbiAgICAgICAgaWYodGhpcy5sb25nQ291bnRlcj09IDUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmxvbmdBcnJIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9uZ0NvdW50ZXI9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLnNoYWtlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zaGFrZS51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY291bnQrPTE3O1xyXG4gICAgICAgIGlmKHRoaXMuY291bnQ+NTQgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVVSSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGlmKHRoaXMucG9pbnRzIT1udWxsICYmIHRoaXMucG9pbnRzLmxlbmd0aD4wICkgICAgICAgXHJcbiAgICAgICAvLyAgaWYoIHRoaXMucG9pbnRzIT1udWxsICYmIHRoaXMucG9pbnRzLmxlbmd0aD4wIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3U3AuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL2lmKHRoaXMucG9pbnRzLmxlbmd0aD4yKVxyXG4gICAgICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICB0aGlzLnBvaW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5kcmF3U3AuZ3JhcGhpY3MuZHJhd0xpbmVzKDAsMCx0aGlzLmdldFBvaW50cygpLFwiI2UzYzY3Y1wiLDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZHJhd1NwLmdyYXBoaWNzLmRyYXdDdXJ2ZXMoMCwwLHRoaXMuZ2V0UG9pbnRzKCksXCIjMzAyYTIxXCIsNik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3U3AuZ3JhcGhpY3MuZHJhd0N1cnZlcygwLDAsdGhpcy5nZXRQb2ludHMoKSxcIiNkNTI2MDhcIiw2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vdGhpcy5kcmF3U3AuY2FjaGVBcyA9IFwibm9ybWFsXCI7XHJcbiAgICAgICAgICAgICAgICAvL3RoaXMuZHJhd1NwLmNhY2hlQXMgPSBcImJpdG1hcFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdTcC5ncmFwaGljcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0TWFuYWdlcigpLmVuZW15TGlzdC5sZW5ndGg+MClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGE6YW55ID10aGlzLmdldE1hbmFnZXIoKS5lbmVteUxpc3Quc2hpZnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAgbGV0IGZseWVyOiBMYXlhLlNwcml0ZSA9IExheWEuUG9vbC5nZXRJdGVtQnlDcmVhdGVGdW4oXCJMaW5lRG90XCIsIHRoaXMuX2NvbnRyb2wuYm9vbS5jcmVhdGUsIHRoaXMuX2NvbnRyb2wuYm9vbSk7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fZW5lbXlCb3gubnVtQ2hpbGRyZW48dGhpcy5tYW5hZ2VyLm1fbGV2ZWwqMTApe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubWFuYWdlci5tX21vZGUgPT0gMSAmJiAgdGhpcy5fZW5lbXlCb3gubnVtQ2hpbGRyZW4+dGhpcy5nZXRNYW5hZ2VyKCkubV9wb2ludHMvNSApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlICBcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRW5lbXkoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG5cclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2hhZG93Qm94LmdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgIHZhciB0ZXg6TGF5YS5UZXh0dXJlID0gTGF5YS5Mb2FkZXIuZ2V0UmVzKFwiZy9zaGFkb3cucG5nXCIpO1xyXG4gICAgICB2YXIgbGlmZUJnOkxheWEuVGV4dHVyZSA9IExheWEuTG9hZGVyLmdldFJlcyhcImcvYmdfeGlhb3h1ZXRpYW9fMDIucG5nXCIpO1xyXG4gICAgICB2YXIgbGlmZUJhcjpMYXlhLlRleHR1cmUgPSBMYXlhLkxvYWRlci5nZXRSZXMoXCJnL2JnX3hpYW94dWV0aWFvXzAzLnBuZ1wiKTtcclxuICAgICAgdmFyIGVsZW1lbnQ6bGF5YS5kaXNwbGF5LlNwcml0ZTtcclxuICAgICAgdmFyICBlbmVteTpFbmVteTE7XHJcbiAgICAgIHRoaXMuX2dhbWVCb3guZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSB0aGlzLl9lbmVteUJveC5udW1DaGlsZHJlbi0xOyBpbmRleCA+IC0xOyBpbmRleC0tKSB7XHJcbiAgXHJcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuX2VuZW15Qm94LmdldENoaWxkQXQoaW5kZXgpIGFzIGxheWEuZGlzcGxheS5TcHJpdGU7XHJcbiAgICAgICAgZW5lbXkgPSBlbGVtZW50LmdldENvbXBvbmVudChFbmVteTEpO1xyXG5cclxuICAgICAgICB0aGlzLnNoYWRvd0JveC5ncmFwaGljcy5kcmF3VGV4dHVyZSh0ZXgsZWxlbWVudC54LTM0LGVsZW1lbnQueS0yOCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2dhbWVCb3guZ3JhcGhpY3MuZHJhd1RleHR1cmUobGlmZUJnLGVsZW1lbnQueC01MCxlbGVtZW50LnktMTI4LDEwMCw5KTtcclxuICAgICAgICB0aGlzLl9nYW1lQm94LmdyYXBoaWNzLmRyYXdUZXh0dXJlKGxpZmVCYXIsZWxlbWVudC54LTUwLGVsZW1lbnQueS0xMjgsICgxLShlbmVteS5kYXRhLmxpZmUtZW5lbXkubUxpZmUpL2VuZW15LmRhdGEubGlmZSkqMTAwLDkpO1xyXG5cclxuXHJcbiAgICAgIH1cclxuICAgICAgZm9yIChsZXQgaW5kZXggPSB0aGlzLmJ1bGxldEFyci5sZW5ndGgtMTsgaW5kZXggPi0xOyBpbmRleC0tKSB7XHJcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5idWxsZXRBcnJbaW5kZXhdO1xyXG4gICAgICAgICAgZWxlbWVudC55IC09IDY7XHJcblxyXG4gICAgICAgICAgaWYoZWxlbWVudC55IDwwIClcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5idWxsZXRBcnIuc3BsaWNlKGluZGV4LDEpO1xyXG4gICAgICAgICAgICB0aGlzLl9nYW1lQm94LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5jaGVja0ZsYW1lQm9vbShbZWxlbWVudC54LGVsZW1lbnQueV0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldEFyci5zcGxpY2UoaW5kZXgsMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nYW1lQm94LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgXHJcbiAgICAgIH1cclxuICAgICAgXHJcblxyXG5cclxuXHJcblxyXG4gICAgICBpZih0aGlzLmdldE1hbmFnZXIoKS5raWxsZWRFbmVteUxpc3QubGVuZ3RoPjApXHJcbiAgICAgIHtcclxuICAgICAgICAgIHZhciBkYXRhOmFueSA9dGhpcy5nZXRNYW5hZ2VyKCkua2lsbGVkRW5lbXlMaXN0LnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgbGV0IGZseWVyOiBMYXlhLlNwcml0ZSA9IExheWEuUG9vbC5nZXRJdGVtQnlDcmVhdGVGdW4oXCJCb29tXCIsIHRoaXMuX2NvbnRyb2wuYm9vbS5jcmVhdGUsIHRoaXMuX2NvbnRyb2wuYm9vbSk7XHJcbiAgICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSAgZmx5ZXIuZ2V0Q2hpbGRCeU5hbWUoXCJhbmlcIikgYXMgbGF5YS5kaXNwbGF5LkFuaW1hdGlvbjtcclxuICAgICAgICAgIGFuaS5wbGF5KDApO1xyXG4gICAgICAgICAgZmx5ZXIueCA9IGRhdGEueDtcclxuICAgICAgICAgIGZseWVyLnkgPSBkYXRhLnk7XHJcbiAgICAgICAgICAvLyBmbHllci54ID0gcHRbMF07XHJcbiAgICAgICAgICAvLyBmbHllci55ID0gcHRbMV07XHJcbiAgICAgICAgICB0aGlzLl9nYW1lQm94LmFkZENoaWxkKGZseWVyKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdGhpcy5fZ2FtZURhdGEuT25FdmVudChcImtpbGxcIixudWxsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLnBvaW50cyE9bnVsbCAmJiB0aGlzLnBvaW50cy5sZW5ndGg+MCAmJiB0aGlzLmJNb3VzZURvd249PSBmYWxzZSlcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLnBvaW50cy5sZW5ndGg+MClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tSGVyby5hdHRhY2soKTtcclxuXHJcbiAgICAgICAgICAgICAgICBMYXlhLnRpbWVyLm9uY2UoMzAwLHRoaXMsZnVuY3Rpb24oKTp2b2lke1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYkF0dGFjayA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmJBdHRhY2spXHJcbiAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwdCA9IHRoaXMucG9pbnRzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwdFswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBsZWZ0Om51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgdG9wOm51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgcmlnaHQ6bnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBib3R0b206bnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmKHRoaXMuZnJvbVg+cHRbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBsZWZ0ID0gcHRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJpZ2h0ID0gdGhpcy5mcm9tWDtcclxuICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGVmdCA9IHRoaXMuZnJvbVg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJpZ2h0ID0gcHRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZih0aGlzLmZyb21ZPHB0WzFdKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdG9wID0gdGhpcy5mcm9tWTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYm90dG9tID0gcHRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRvcCA9IHB0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBib3R0b20gPSB0aGlzLmZyb21ZO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmhpdC5sZWZ0ID0gbGVmdDtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmhpdC50b3AgPSB0b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5oaXQucmlnaHQgPSA3MjAtcmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5oaXQuYm90dG9tID0gMTEyMC1ib3R0b207XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZihwdFswXTwzNjApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpdC5yb3RhdGlvbiA9IDI3MC0xODAvTWF0aC5QSSogTWF0aC5hdGFuMigzNjAtcHRbMF0sdGhpcy5oaXQueS1wdFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGl0LndpZHRoID0gTWF0aC5zcXJ0KE1hdGgucG93KDM2MC1wdFswXSwyKStNYXRoLnBvdyh0aGlzLmhpdC55LXB0WzFdLDIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAgaWYocHRbMF0gPjM2MClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGl0LnJvdGF0aW9uID0gMjcwICsgMTgwL01hdGguUEkqTWF0aC5hdGFuMihwdFswXS0zNjAsdGhpcy5oaXQueS1wdFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGl0LndpZHRoID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0WzBdLTM2MCwyKStNYXRoLnBvdyh0aGlzLmhpdC55LXB0WzFdLDIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXQucm90YXRpb24gPSAyNzA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGl0LndpZHRoID0gdGhpcy5oaXQueS1wdFsxXSsyNTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICBsZXQgZmx5ZXI6IExheWEuU3ByaXRlID0gTGF5YS5Qb29sLmdldEl0ZW1CeUNyZWF0ZUZ1bihcIkxpbmVEb3RcIiwgdGhpcy5fY29udHJvbC5ib29tLmNyZWF0ZSwgdGhpcy5fY29udHJvbC5ib29tKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmx5ZXI6IExheWEuU3ByaXRlID0gTGF5YS5Qb29sLmdldEl0ZW1CeUNyZWF0ZUZ1bihcIkxpbmVEb3RcIiwgdGhpcy5fY29udHJvbC5saW5lRG90LmNyZWF0ZSwgdGhpcy5fY29udHJvbC5saW5lRG90KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pOmxheWEuZGlzcGxheS5BbmltYXRpb24gPSAgZmx5ZXIuZ2V0Q2hpbGRCeU5hbWUoXCJhbmlcIikgYXMgbGF5YS5kaXNwbGF5LkFuaW1hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBhbmkucGxheSgwKTtcclxuICAgICAgICAgICAgICAgICAgICBmbHllci54ID0gcHRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZmx5ZXIueSA9IHB0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dhbWVCb3guYWRkQ2hpbGQoZmx5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGl0LnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tCb29tKHB0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIH0gICAgXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3U3AuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpdC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5tSGVyby5hdHRhY2tGaW5pc2goKTtcclxuICAgICAgICAgICAgdGhpcy5oaXQudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmJBdHRhY2sgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNyZWF0ZUVuZW15KGRhdGE6YW55KVxyXG4gICAge1xyXG4gICAgICAgIHZhciBvdXQ6QW5pSW5zdCA9IEFuaUluc3QuZ2V0T3JDcmVhdGUoe3g6ZGF0YS5weCx5OmRhdGEucHl9KTtcclxuICAgICAgICBpZihkYXRhLnN4IT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG91dC5wbGF5VXJsKFwiYm9ybi5hdGxhc1wiLGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb3V0LnBsYXlVcmwoXCJib3JuMi5hdGxhc1wiLGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIExheWEudGltZXIub25jZSg1MDAsdGhpcyxmdW5jdGlvbihkYXRhOmFueSl7XHJcblxyXG4gICAgICAgICAgICBsZXQgZmx5ZXI6IExheWEuU3ByaXRlID0gTGF5YS5Qb29sLmdldEl0ZW1CeUNyZWF0ZUZ1bihcIkVuZW15MVwiLCB0aGlzLl9jb250cm9sLmVuZW15MS5jcmVhdGUsIHRoaXMuX2NvbnRyb2wuZW5lbXkxKTtcclxuICAgICAgICAgICAgLy8gdmFyIGFuaTpsYXlhLmRpc3BsYXkuQW5pbWF0aW9uID0gIGZseWVyLmdldENoaWxkQnlOYW1lKFwiYW5pXCIpIGFzIGxheWEuZGlzcGxheS5BbmltYXRpb247XHJcbiAgICAgICAgICAgIC8vIGFuaS5wbGF5KDApO1xyXG4gICAgICAgICAgICB2YXIgZW5lbXkgPSBmbHllci5nZXRDb21wb25lbnQoRW5lbXkxKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGVuZW15LnNldERhdGEoZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VuZW15Qm94LmFkZENoaWxkQXQoZmx5ZXIsMCk7XHJcblxyXG4gICAgICAgIH0sW2RhdGFdKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGNoZWNrRmxhbWVCb29tKHB0OmFueSk6Ym9vbGVhblxyXG4gICAge1xyXG4gICAgICBcclxuICAgICAgdmFyIGxlbjpudW1iZXIgPSB0aGlzLl9lbmVteUJveC5fY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICB2YXIgcmVjdDpsYXlhLm1hdGhzLlJlY3RhbmdsZSA9IG5ldyBsYXlhLm1hdGhzLlJlY3RhbmdsZSgpO1xyXG4gICAgICB2YXIgZWxlbWVudDpsYXlhLmRpc3BsYXkuU3ByaXRlO1xyXG4gICAgICB2YXIgZW5lbXk6RW5lbXkxO1xyXG4gICAgICB2YXIgdzpudW1iZXIgPSA4MDtcclxuICAgICAgdmFyIGg6bnVtYmVyID0gODA7XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGxldCBpbmRleCA9IGxlbi0xOyBpbmRleCA+IC0xOyBpbmRleC0tKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuX2VuZW15Qm94LmdldENoaWxkQXQoaW5kZXgpIGFzIGxheWEuZGlzcGxheS5TcHJpdGU7XHJcbiAgICAgICAgZW5lbXkgPSBlbGVtZW50LmdldENvbXBvbmVudChFbmVteTEpO1xyXG4gICAgICAgaWYoZW5lbXkubUtpbGxlZClcclxuICAgICAgIHtcclxuICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgIH1cclxuICAgICAgICB3ID0gZW5lbXkuZGF0YS53O1xyXG4gICAgICAgIGggPSBlbmVteS5kYXRhLmg7XHJcbiAgICAgICAgLy8gdGhpcy5kcmF3U3AuZ3JhcGhpY3MuZHJhd1JlY3QoZWxlbWVudC54LGVsZW1lbnQueSwxMCwxMCxudWxsLFwiIzAwRkYwMFwiLDIpO1xyXG4gICAgICAgIC8vIHRoaXMuZHJhd1NwLmdyYXBoaWNzLmRyYXdSZWN0KGVsZW1lbnQueC13LzIsZWxlbWVudC55LWgsdyxoLG51bGwsXCIjRkYwMDAwXCIsMik7XHJcbiAgICAgICAgcmVjdC5zZXRUbyhlbGVtZW50Lngtdy8yLGVsZW1lbnQueS1oLHcsaClcclxuXHJcbiAgICAgICBcclxuICAgICAgICBpZihyZWN0LmNvbnRhaW5zKHB0WzBdLHB0WzFdKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZ2V0Q29tcG9uZW50KEVuZW15MSkuc2V0TGlmZSg1KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja0Jvb20ocHQ6QXJyYXk8YW55Pik6dm9pZFxyXG4gICAge1xyXG4gICAgICBcclxuICAgICAgdmFyIGxlbjpudW1iZXIgPSB0aGlzLl9lbmVteUJveC5fY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICB2YXIgcmVjdDpsYXlhLm1hdGhzLlJlY3RhbmdsZSA9IG5ldyBsYXlhLm1hdGhzLlJlY3RhbmdsZSgpO1xyXG4gICAgICB2YXIgZWxlbWVudDpsYXlhLmRpc3BsYXkuU3ByaXRlO1xyXG4gICAgICB2YXIgZW5lbXk6RW5lbXkxO1xyXG4gICAgICB2YXIgdzpudW1iZXIgPSA4MDtcclxuICAgICAgdmFyIGg6bnVtYmVyID0gODA7XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGxldCBpbmRleCA9IGxlbi0xOyBpbmRleCA+IC0xOyBpbmRleC0tKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuX2VuZW15Qm94LmdldENoaWxkQXQoaW5kZXgpIGFzIGxheWEuZGlzcGxheS5TcHJpdGU7XHJcbiAgICAgICAgZW5lbXkgPSBlbGVtZW50LmdldENvbXBvbmVudChFbmVteTEpO1xyXG4gICAgICAgaWYoZW5lbXkubUtpbGxlZClcclxuICAgICAgIHtcclxuICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgIH1cclxuICAgICAgICB3ID0gZW5lbXkuZGF0YS53O1xyXG4gICAgICAgIGggPSBlbmVteS5kYXRhLmg7XHJcbiAgICAgICAgLy8gdGhpcy5kcmF3U3AuZ3JhcGhpY3MuZHJhd1JlY3QoZWxlbWVudC54LGVsZW1lbnQueSwxMCwxMCxudWxsLFwiIzAwRkYwMFwiLDIpO1xyXG4gICAgICAgIC8vIHRoaXMuZHJhd1NwLmdyYXBoaWNzLmRyYXdSZWN0KGVsZW1lbnQueC13LzIsZWxlbWVudC55LWgsdyxoLG51bGwsXCIjRkYwMDAwXCIsMik7XHJcbiAgICAgICAgcmVjdC5zZXRUbyhlbGVtZW50Lngtdy8yLGVsZW1lbnQueS1oLHcsaClcclxuICAgICAgICBpZihyZWN0LmNvbnRhaW5zKHB0WzBdLHB0WzFdKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZ2V0Q29tcG9uZW50KEVuZW15MSkuc2V0TGlmZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9pbnRzKCk6QXJyYXk8bnVtYmVyPlxyXG4gICAge1xyXG4gICAgICAgIHZhciBwdHM6QXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgICAgIGlmKHRoaXMucG9pbnRzLmxlbmd0aD4wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHB0cy5wdXNoKGVsZW1lbnRbMF0pO1xyXG4gICAgICAgICAgICAgICAgcHRzLnB1c2goZWxlbWVudFsxXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHB0cztcclxuXHJcbiAgICB9XHJcbiAgICBkcmF3RG93bihlOiBMYXlhLkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYodGhpcy5wb2ludHMubGVuZ3RoID09IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm9uKExheWEuRXZlbnQuTU9VU0VfTU9WRSwgdGhpcywgdGhpcy5kcmF3TW92ZSk7XHJcbiAgICAgICAgICAgIHRoaXMub24oTGF5YS5FdmVudC5NT1VTRV9VUCwgdGhpcywgdGhpcy5kcmF3VXApO1xyXG4gICAgICAgICAgICB0aGlzLm9uKExheWEuRXZlbnQuTU9VU0VfT1VULCB0aGlzLCB0aGlzLmRyYXdVcCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxhc3RYID0gTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFkgPSBMYXlhLnN0YWdlLm1vdXNlWTtcclxuICAgICAgICAgICAgdGhpcy5wb2ludHMucHVzaChbdGhpcy5sYXN0WCx0aGlzLmxhc3RZXSk7XHJcbiAgICAgICAgICAgIHRoaXMuYk1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBMZXJwKGE6bnVtYmVyLCBiOm51bWJlciwgdDpudW1iZXIpOm51bWJlclxyXG4gICAge1xyXG4gICAgICAgcmV0dXJuIGErKGItYSkqdDtcclxuICAgIH1cclxuICAgIGRyYXdNb3ZlKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICBpZih0aGlzLmJNb3VzZURvd24gKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIHIgPSBzcXJ0KCh4MS0geDIpKih4MSAtIHgyKSArKHkxIC0geTIpKih5MSAtIHkyKSk7XHJcbiAgICAgICAgICAgIC8vIGN5ID0gKGQqKHkyLXkxKSkvciArIHkxOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBjeCA9IChkKih4Mi14MSkpL3IgKyB4MTtcclxuLypcclxuICAgICAgICAgICAgdmFyIGQgPSAxMDtcclxuICAgICAgICAgICAvLyB2YXIgciA9IE1hdGguc3FydCgoTGF5YS5zdGFnZS5tb3VzZVgtdGhpcy5sYXN0WCkqKExheWEuc3RhZ2UubW91c2VYLXRoaXMubGFzdFgpICsoTGF5YS5zdGFnZS5tb3VzZVktdGhpcy5sYXN0WSkqKExheWEuc3RhZ2UubW91c2VZLXRoaXMubGFzdFkpKTtcclxuICAgICAgICAgICAgdmFyIHgxID0gTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgICAgIHZhciB5MSA9IExheWEuc3RhZ2UubW91c2VZO1xyXG4gICAgICAgICAgICB2YXIgeDIgPSB0aGlzLmxhc3RYO1xyXG4gICAgICAgICAgICB2YXIgeTIgPSB0aGlzLmxhc3RZO1xyXG4gICAgICAgICAgICB2YXIgciA9IE1hdGguc3FydCgoeDEtIHgyKSooeDEgLSB4MikgKyh5MSAtIHkyKSooeTEgLSB5MikpO1xyXG4gICAgICAgICAgICB2YXIgY3kgPSAoZCooeTIteTEpKS9yICsgeTE7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBjeCA9IChkKih4Mi14MSkpL3IgKyB4MTtcclxuKi9cclxuICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbGFzdFhUID0gdGhpcy5MZXJwKHRoaXMubGFzdFgsTGF5YS5zdGFnZS5tb3VzZVgsMC41KTtcclxuICAgICAgICAgICAgdmFyIGxhc3RZVCA9IHRoaXMuTGVycCh0aGlzLmxhc3RZLExheWEuc3RhZ2UubW91c2VZLDAuNSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcG93ID0gTWF0aC5wb3coTGF5YS5zdGFnZS5tb3VzZVgtbGFzdFhULDIpK01hdGgucG93KExheWEuc3RhZ2UubW91c2VZLWxhc3RZVCwyKTtcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgdG9wID0gMTA7XHJcbiAgICAgICAgICAgIC8vIHZhciB0bXBYQXJyID0gW107XHJcbiAgICAgICAgICAgIC8vIHZhciB0bXBZQXJyID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgdG9wKzE7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgLy8gICAgIHRtcFhBcnIucHVzaCggdGhpcy5MZXJwKHRoaXMubGFzdFgsTGF5YS5zdGFnZS5tb3VzZVgsaW5kZXgvdG9wKSk7XHJcbiAgICAgICAgICAgIC8vICAgICB0bXBZQXJyLnB1c2goIHRoaXMuTGVycCh0aGlzLmxhc3RZLExheWEuc3RhZ2UubW91c2VZLGluZGV4L3RvcCkpO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgMTAxOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnBvaW50cy5sZW5ndGg+MjUwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsYXN0WFQgPSB0aGlzLkxlcnAodGhpcy5sYXN0WCxMYXlhLnN0YWdlLm1vdXNlWCxpbmRleC8xMDApO1xyXG4gICAgICAgICAgICAgICAgbGFzdFlUID0gdGhpcy5MZXJwKHRoaXMubGFzdFksTGF5YS5zdGFnZS5tb3VzZVksaW5kZXgvMTAwKTtcclxuICAgICAgICAgICAgICAgIHBvdyA9IE1hdGgucG93KHRoaXMubGFzdFgtbGFzdFhULDIpK01hdGgucG93KHRoaXMubGFzdFktbGFzdFlULDIpOyBcclxuICAgICAgICAgICAgLy9pZihwb3c+MTAwMDApXHJcbiAgICAgICAgICAgICAgICBpZihwb3c+ODApXHJcbiAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAvLyB3aGlsZShNYXRoLnBvdygoTGF5YS5zdGFnZS5tb3VzZVgtdGhpcy5sYXN0WCkvNSwyKStNYXRoLnBvdygoTGF5YS5zdGFnZS5tb3VzZVktdGhpcy5sYXN0WSkvNSwyKT4xMDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0WCA9IGxhc3RYVDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RZID0gbGFzdFlUOyAgICBcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSAxMCAtIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubGFzdFggPSBMYXlhLnN0YWdlLm1vdXNlWDtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubGFzdFkgPSBMYXlhLnN0YWdlLm1vdXNlWTsgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50cy5wdXNoKFt0aGlzLmxhc3RYLHRoaXMubGFzdFldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGxhc3RYVCA9IHRoaXMuTGVycCh0aGlzLmxhc3RYLExheWEuc3RhZ2UubW91c2VYLDAuNSk7XHJcbiAgICAgICAgICAgICAgICAvLyBsYXN0WVQgPSB0aGlzLkxlcnAodGhpcy5sYXN0WSxMYXlhLnN0YWdlLm1vdXNlWSwwLjUpO1xyXG4gICAgICAgICAgICAgICAgLy8gcG93ID0gTWF0aC5wb3coTGF5YS5zdGFnZS5tb3VzZVgtbGFzdFhULDIpK01hdGgucG93KExheWEuc3RhZ2UubW91c2VZLWxhc3RZVCwyKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibSAgbW92ZSAgeCBcIiArIHRoaXMubGFzdFgrIFwiICAgeTogXCIrIHRoaXMubGFzdFkrIFwiICAgcG93ICAtLSBcIiArIHBvdyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXdVcChlOiBMYXlhLkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAvLyBjb25zb2xlLmxvZyhcIm0gIHVwXCIrdGhpcy5wb2ludHMubGVuZ3RoKTtcclxuICAgICAgICBpZih0aGlzLmJNb3VzZURvd24gKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gaWYoTWF0aC5wb3coTGF5YS5zdGFnZS5tb3VzZVgtdGhpcy5sYXN0WCwyKStNYXRoLnBvdyhMYXlhLnN0YWdlLm1vdXNlWS10aGlzLmxhc3RZLDIpPjE2KVxyXG4gICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmxhc3RYID0gTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmxhc3RZID0gTGF5YS5zdGFnZS5tb3VzZVk7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnBvaW50cy5wdXNoKFt0aGlzLmxhc3RYLHRoaXMubGFzdFldKTtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5vZmYoTGF5YS5FdmVudC5NT1VTRV9NT1ZFLCB0aGlzLCB0aGlzLmRyYXdNb3ZlKTtcclxuICAgICAgICAgICAgdGhpcy5vZmYoTGF5YS5FdmVudC5NT1VTRV9VUCwgdGhpcywgdGhpcy5kcmF3VXApO1xyXG4gICAgICAgICAgICB0aGlzLm9mZihMYXlhLkV2ZW50Lk1PVVNFX09VVCwgdGhpcywgdGhpcy5kcmF3VXApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kcmF3TW92ZShlKTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5iTW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgXHJcbiAgICBvblRpcENsaWNrKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAvLyAgIGNvbnNvbGUubG9nKFwiaGhoaGhjbGlja2trayBcIik7XHJcbiAgICAgICAvLyB0aGlzLmxvYWRpbmcudGV4dCA9IHRoaXMubG9hZGluZy50ZXh0ICtcIi5cIlxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgYWRkTGlnaHQyKGFuaTpBbmlJbnN0KTp2b2lke1xyXG4gICAgICAgIHRoaXMuX2dhbWVCb3guYWRkQ2hpbGQoYW5pKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldEdhbWUoKXtcclxuICAgICAgICB2YXIgbGVuOm51bWJlciA9IHRoaXMuX2VuZW15Qm94Lm51bUNoaWxkcmVuO1xyXG5cclxuXHJcbiAgICAgICBcclxuICAgICAgICB2YXIgZWxlbWVudDpsYXlhLmRpc3BsYXkuU3ByaXRlO1xyXG4gICAgICAgIHZhciBlbmVteTpFbmVteTE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBsZW4tMTsgaW5kZXggPiAtMTsgaW5kZXgtLSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuX2VuZW15Qm94LmdldENoaWxkQXQoaW5kZXgpIGFzIGxheWEuZGlzcGxheS5TcHJpdGU7XHJcbiAgICAgICAgICAgIGVuZW15ID0gZWxlbWVudC5nZXRDb21wb25lbnQoRW5lbXkxKTtcclxuICAgICAgICAgICAgZW5lbXkuY29tcGxldGVSZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5sb25nQXJyLmxlbmd0aC0xOyBpbmRleCA+LTE7IGluZGV4LS0pe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMubG9uZ0FycltpbmRleF07XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY291bnRlciA9IDEwMDtcclxuICAgICAgICAgICAgdGhpcy5sb25nQXJyLnNwbGljZShpbmRleCwxKTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJCdWZmZXIxID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5iQnVmZmVyMiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYkJ1ZmZlcjMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJCdWZmZXIxUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJCdWZmZXIyUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJCdWZmZXIzUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnVzZWRFbmVyZ3kgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG59IiwiLyoqXHJcbiAqIOeIhueCuOiEmuacrCDpgLvovpHlj4rlr7nosaHmsaDlm57mlLbmnLrliLZcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lQ29udHJvbCBleHRlbmRzIExheWEuU2NyaXB0IHtcclxuICAgICAvKiogQHByb3Age25hbWU6Ym9vbSx0aXBzOlwi54iG54K45a655Zmo6aKE5Yi25L2T5a+56LGhXCIsdHlwZTpQcmVmYWJ9Ki9cclxuICAgIGJvb206TGF5YS5QcmVmYWI7XHJcbiAgICAvKiogQHByb3Age25hbWU6bGluZURvdCx0aXBzOlwiTGluZURvdOWuueWZqOmihOWItuS9k+WvueixoVwiLHR5cGU6UHJlZmFifSovXHJcbiAgICBsaW5lRG90OkxheWEuUHJlZmFiO1xyXG5cclxuICAgIC8qKiBAcHJvcCB7bmFtZTplbmVteTEsdGlwczpcIkVuZW15MeWuueWZqOmihOWItuS9k+WvueixoVwiLHR5cGU6UHJlZmFifSovXHJcbiAgICBlbmVteTE6TGF5YS5QcmVmYWI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgIH1cclxuIFxyXG59IiwiXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFrZUNsc1xyXG4gICAge1xyXG5cclxuXHRcdHNoYWtlZWU6YW55O1xyXG4gICAgICAgIGE6U2hha2VDbHMgO1xyXG5cdFx0Ym9vbDpib29sZWFuIDtcclxuXHRcdGNvbnN0cnVjdG9yKCl7XHJcblx0XHRcdHRoaXMuYSA9IHRoaXNcclxuXHRcdFx0dGhpcy5ib29sID0gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdFxyXG5cdFx0cHVibGljIGhpdEFuZFNoYWtlKGEsIGMsIGUpIHtcclxuXHRcdFx0dGhpcy5ib29sID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5zaGFrZWVlID0gYTtcclxuXHRcdFx0bnVsbCA9PSB0aGlzLnNoYWtlZWUuYmFzZXggJiYgKHRoaXMuc2hha2VlZS5iYXNleCA9IHRoaXMuc2hha2VlZS54KTtcclxuXHRcdFx0bnVsbCA9PSB0aGlzLnNoYWtlZWUuYmFzZXkgJiYgKHRoaXMuc2hha2VlZS5iYXNleSA9IHRoaXMuc2hha2VlZS55KTtcclxuXHRcdFx0dGhpcy5zaGFrZWVlLnJhbmdlWCA9IG51bGwgPT0gYyA/IDIwIDogYztcclxuXHRcdFx0dGhpcy5zaGFrZWVlLnJhbmdlWSA9IG51bGwgPT0gZSA/IDIwIDogZTtcclxuXHRcdFx0dGhpcy5zaGFrZWVlLnggPSB0aGlzLnNoYWtlZWUuYmFzZXggLSB0aGlzLnNoYWtlZWUucmFuZ2VYIC8gMiArIHRoaXMuc2hha2VlZS5yYW5nZVggKiBNYXRoLnJhbmRvbSgpO1xyXG5cdFx0XHR0aGlzLnNoYWtlZWUueSA9IHRoaXMuc2hha2VlZS5iYXNleSAtIHRoaXMuc2hha2VlZS5yYW5nZVkgKyAyICogdGhpcy5zaGFrZWVlLnJhbmdlWSAqIE1hdGgucmFuZG9tKCk7XHJcblx0XHRcdHRoaXMuc2hha2VlZS5mbGFzaFRpbWUgPTY7XHJcblx0XHRcdC8vdGhpcy5zaGFrZWVlLmZ1bmNDYWxsID0gbnVsbCA9PSBmID8gbnVsbCA6IGY7XHJcblx0XHRcdHRoaXMuc2hha2VlZS5zaGFrZVRpbWVDb3VudCA9IDA7XHJcblx0XHRcdHRoaXMuc2hha2VlZS5jZnJhbWUgPSAwXHJcblx0XHR9O1xyXG5cdFx0cHVibGljIHVwZGF0ZSgpIHtcclxuXHRcdFx0dGhpcy5ib29sICYmICh0aGlzLnNoYWtlZWUuY2ZyYW1lICs9IDEsIDIgPiB0aGlzLnNoYWtlZWUuY2ZyYW1lIHx8ICh0aGlzLnNoYWtlZWUuY2ZyYW1lID0gMCwgNSA9PSB0aGlzLnNoYWtlZWUuc2hha2VUaW1lQ291bnQgPyB0aGlzLmEuY2FuY2VsSGl0QW5kU2hha2UodGhpcy5zaGFrZWVlKSA6ICh0aGlzLnNoYWtlZWUuc2hha2VUaW1lQ291bnQrKywgdGhpcy5zaGFrZWVlLnggKz0gMS43ICogKHRoaXMuc2hha2VlZS5iYXNleCAtIHRoaXMuc2hha2VlZS54KSwgdGhpcy5zaGFrZWVlLnkgKz0gMS43ICogKHRoaXMuc2hha2VlZS5iYXNleSAtIHRoaXMuc2hha2VlZS55KSkpKVxyXG5cdFx0fTtcclxuXHRcdHB1YmxpYyAgY2FuY2VsSGl0QW5kU2hha2UoYSkge1xyXG5cdFx0XHR0aGlzLmJvb2wgPSAhMTtcclxuXHRcdFx0YSB8fCAoYSA9IHRoaXMuc2hha2VlZSk7XHJcblx0XHRcdGEueCA9IGEuYmFzZXg7XHJcblx0XHRcdGEueSA9IGEuYmFzZXlcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpbmdsZXRvblxyXG57XHJcbiAgICAvL+WFtuWunuWunumZheeahOW8gOWPkemhueebruS4re+8jOS4jeS4gOWumuS8mueUqOWIsOaVsOe7hO+8jOacieWPr+iDveS8muaKiuaVsOe7hOS5i+exu+eahOi/m+ihjOWwgeijhVxyXG4gICAgLyoqIOWtmOaUvuWIneWni+WMlui/h+eahOaehOmAoOWHveaVsCzov5nph4znlKjmlbDnu4TmnaXlrZjmlL7mnoTpgKDlh73mlbAgKiovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBjbGFzc0tleXM6RnVuY3Rpb25bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2xhc3NWYWx1ZXM6YW55W10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGNsYXp6OiBhbnkgPSB0aGlzW1wiY29uc3RydWN0b3JcIl07XHJcbiAgICAgICAgLy/kuLrnqbrml7bvvIzooajnpLrmtY/op4jlmajkuI3mlK/mjIHov5nmoLfor7vlj5bmnoTpgKDlh73mlbBcclxuICAgICAgICBpZiAoIWNsYXp6KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g6Ziy5q2i6YeN5aSN5a6e5L6L5YyWXHJcbiAgICAgICAgaWYgKFNpbmdsZXRvbi5jbGFzc0tleXMuaW5kZXhPZihjbGF6eikgIT0gLTEpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzICsgXCIg5Y+q5YWB6K645a6e5L6L5YyW5LiA5qyh77yBXCIpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNpbmdsZXRvbi5jbGFzc0tleXMucHVzaChjbGF6eik7XHJcbiAgICAgICAgICAgIFNpbmdsZXRvbi5jbGFzc1ZhbHVlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAvL+azqOaEj++8jFNpbmdsZXRvbuaYr+imgeabv+aNouaIkOS9oOiHquW3seWunueOsOeahOWtkOexuyDov5nph4zmsqHmnInlrp7pmYXnmoTkvZznlKhcclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOlNpbmdsZXRvbjtcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5a6e5L6L55qE6Z2Z5oCB5pa55rOV5a6e5L6LXHJcbiAgICAgKiBAcmV0dXJuXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6U2luZ2xldG9uXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXRoaXMuaW5zdGFuY2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFNpbmdsZXRvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6ZSA5q+B5pa55rOV44CC5LqL5a6e5LiK5Y2V5L6L5piv5b6I5bCR6L+b6KGM6ZSA5q+B55qEXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3kobzogYW55ID0gbnVsbCk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLm9uRGVzdHJveSgpO1xyXG4gICAgICAgIFNpbmdsZXRvbi5yZW1vdmVJbnN0YW5jZSh0aGlzW1wiY29uc3RydWN0b3JcIl0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a2Q57G76YeN5YaZ55qE5pa55rOVXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3koKTogdm9pZFxyXG4gICAge1xyXG5cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Yig6Zmk5Y2V5L6L55qE5a6e5L6L77yI5LiN5a+55Y2V5L6L5pys6Lqr5YGa5Lu75L2V55qE6ZSA5q+B77yM5Y+q5piv5Yig6Zmk5LuW55qE5byV55So77yJXHJcbiAgICAgKiBAcGFyYW0gY2xhenog5Y2V5L6L55qEQ2xhc3Plr7nosaFcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByZW1vdmVJbnN0YW5jZShjbGF6ejogRnVuY3Rpb24pOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGluZGV4OiBudW1iZXIgPSB0aGlzLmNsYXNzS2V5cy5pbmRleE9mKGNsYXp6KTtcclxuICAgICAgICBpZiAoaW5kZXggPT0gLTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGFzc0tleXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLmNsYXNzVmFsdWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKblrZjmlL7mnInov5nkuKrmnoTpgKDlh73mlbBcclxuICAgICAqIEBwYXJhbSBjbGF6eiDmnoTpgKDlh73mlbBcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRGdW5WYWx1ZShjbGF6ejogRnVuY3Rpb24pOmFueVxyXG4gICAge1xyXG4gICAgICAgIGxldCBmdW5zOkZ1bmN0aW9uW10gPSB0aGlzLmNsYXNzS2V5cztcclxuICAgICAgICBsZXQgbGVuZ3RoOm51bWJlciA9IGZ1bnMubGVuZ3RoO1xyXG4gICAgICAgIGZvcihsZXQgaTpudW1iZXIgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihjbGF6eiA9PSBmdW5zW2ldKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NWYWx1ZXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5Y2V5L6L57G777yM6Iul5LiN5a2Y5Zyo5YiZ5Yib5bu6LuaJgOacieeahOWNleS+i+WIm+W7uueahOaXtuWAme+8jOmDveW/hemhu+S9v+eUqOi/meS4quaWueazleadpeWIm+W7uu+8jOi/meagt+WPr+S7peWBmuWIsOe7n+S4gOeuoeeQhuWNleS+i1xyXG4gICAgICogQHBhcmFtIGNsYXp6IOS7u+aEj+mcgOimgeWunueOsOWNleS+i+aViOaenOeahOexu1xyXG4gICAgICogQHJldHVyblxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEluc3RhbmNlT3JDcmVhdGUoY2xheno6YW55KTogYW55XHJcbiAgICB7XHJcbiAgICAgICAgdmFyIG9iajogYW55ID0gdGhpcy5nZXRGdW5WYWx1ZShjbGF6eik7XHJcbiAgICAgICAgaWYgKG9iailcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iaiA9IG5ldyBjbGF6eigpO1xyXG4gICAgICAgIC8v5LiN5pivU2luZ2xldG9u55qE5a2Q57G777yM5YiZ5omL5Yqo5re75YqgU2luZ2xldG9u5p6E6YCg5Zmo5Lya6Ieq5Yqo5re75Yqg5YiwY2xhc3NNYXBcclxuICAgICAgICBpZiAoIShvYmogaW5zdGFuY2VvZiBTaW5nbGV0b24pKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc0tleXMucHVzaChjbGF6eik7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NWYWx1ZXMucHVzaChvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi8uLi91aS9sYXlhTWF4VUlcIjtcclxuLyoqXHJcbiAqIOacrOekuuS+i+mHh+eUqOmdnuiEmuacrOeahOaWueW8j+WunueOsO+8jOiAjOS9v+eUqOe7p+aJv+mhtemdouWfuuexu++8jOWunueOsOmhtemdoumAu+i+keOAguWcqElERemHjOmdouiuvue9ruWcuuaZr+eahFJ1bnRpbWXlsZ7mgKfljbPlj6/lkozlnLrmma/ov5vooYzlhbPogZRcclxuICog55u45q+U6ISa5pys5pa55byP77yM57un5om/5byP6aG16Z2i57G777yM5Y+v5Lul55u05o6l5L2/55So6aG16Z2i5a6a5LmJ55qE5bGe5oCn77yI6YCa6L+HSURF5YaFdmFy5bGe5oCn5a6a5LmJ77yJ77yM5q+U5aaCdGhpcy50aXBMYmxs77yMdGhpcy5zY29yZUxibO+8jOWFt+acieS7o+eggeaPkOekuuaViOaenFxyXG4gKiDlu7rorq7vvJrlpoLmnpzmmK/pobXpnaLnuqfnmoTpgLvovpHvvIzpnIDopoHpopHnuYHorr/pl67pobXpnaLlhoXlpJrkuKrlhYPntKDvvIzkvb/nlKjnu6fmib/lvI/lhpnms5XvvIzlpoLmnpzmmK/ni6znq4vlsI/mqKHlnZfvvIzlip/og73ljZXkuIDvvIzlu7rorq7nlKjohJrmnKzmlrnlvI/lrp7njrDvvIzmr5TlpoLlrZDlvLnohJrmnKzjgIJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhcm5pbmdEaWFsb2cgZXh0ZW5kcyB1aS5XYXJuaW5nRGlhbG9nVUkge1xyXG4gICBcclxuICAgIGNvdW50Om51bWJlciA9IDA7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5DTElDSywgdGhpcywgdGhpcy5vblRpcENsaWNrKTtcclxuICAgICAgICB0aGlzLmNvdW50ID0gNTtcclxuICAgICAgICBMYXlhLnRpbWVyLmxvb3AoMTAwMCx0aGlzLHRoaXMuY291bnRlckhhbmRsZXIpO1xyXG4gICAgICAgXHJcbiAgICB9XHJcbiAgICBjb3VudGVySGFuZGxlcigpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jb3VudC0tO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMuY291bnQ8MClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYW5TZWxmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMudGlwcy50ZXh0ID0gXCJcIisgdGhpcy5jb3VudCtcIuenkuWQjuiHquWKqOW8gOWni+a4uOaIj1wiXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIGNsZWFuU2VsZigpe1xyXG4gICAgICAgIExheWEudGltZXIuY2xlYXIodGhpcyx0aGlzLmNvdW50ZXJIYW5kbGVyKTtcclxuICAgICAgICBMYXlhLnN0YWdlLm9mZihMYXlhLkV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLm9uVGlwQ2xpY2spO1xyXG4gICAgICAgIExheWEuU2NlbmUub3BlbihcIkxvYWRTY2VuZS5zY2VuZVwiLHRydWUpO1xyXG4gICAgfVxyXG5cclxuIFxyXG5cclxuICAgIG9uVGlwQ2xpY2soZTogTGF5YS5FdmVudCk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFuU2VsZigpO1xyXG4gICAgICAgXHJcbiAgICBcclxuICAgICAgIFxyXG4gICAgICAgIC8vdGhpcy5sb2FkaW5nLnRleHQgPSB0aGlzLmxvYWRpbmcudGV4dCArXCIuXCJcclxuICAgIH1cclxuXHJcbiAgICAvLyBjbG9zZSh0eXBlPzogc3RyaW5nKTogdm9pZHtcclxuICAgIC8vICAgICBzdXBlci5jbG9zZSh0eXBlKTtcclxuXHJcbiAgICAvLyB9XHJcbn0iLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cbmltcG9ydCBWaWV3PUxheWEuVmlldztcclxuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcclxuaW1wb3J0IFNjZW5lPUxheWEuU2NlbmU7XG52YXIgUkVHOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcbmV4cG9ydCBtb2R1bGUgdWkge1xyXG4gICAgZXhwb3J0IGNsYXNzIEdhbWVFbmRVSSBleHRlbmRzIExheWEuRGlhbG9nIHtcclxuXHRcdHB1YmxpYyBjb2luczpMYXlhLkxhYmVsO1xuXHRcdHB1YmxpYyBsZXZlbDpMYXlhLkxhYmVsO1xuXHRcdHB1YmxpYyBjcmF6eTpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgY29udGludWU6TGF5YS5CdXR0b247XG4gICAgICAgIGNvbnN0cnVjdG9yKCl7IHN1cGVyKCl9XHJcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4oKTp2b2lkIHtcclxuICAgICAgICAgICAgc3VwZXIuY3JlYXRlQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkU2NlbmUoXCJHYW1lRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLkdhbWVFbmRVSVwiLEdhbWVFbmRVSSk7XHJcbiAgICBleHBvcnQgY2xhc3MgR2FtZVRvcFVJVUkgZXh0ZW5kcyBsYXlhLmRpc3BsYXkuU2NlbmUge1xyXG5cdFx0cHVibGljIHN0YXJ0QnRuOkxheWEuQnV0dG9uO1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwiR2FtZVRvcFVJXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLkdhbWVUb3BVSVVJXCIsR2FtZVRvcFVJVUkpO1xyXG4gICAgZXhwb3J0IGNsYXNzIExvYWRTY2VuZVVJIGV4dGVuZHMgbGF5YS5kaXNwbGF5LlNjZW5lIHtcclxuXHRcdHB1YmxpYyBzaGFkb3dCb3g6TGF5YS5TcHJpdGU7XG5cdFx0cHVibGljIF9lbmVteUJveDpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgZHJhd1NwOkxheWEuU3ByaXRlO1xuXHRcdHB1YmxpYyBfZ2FtZUJveDpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgaGl0OkxheWEuSW1hZ2U7XG5cdFx0cHVibGljIGhlcm86TGF5YS5TcHJpdGU7XG5cdFx0cHVibGljIHRvcFByb2dyZXNzOkxheWEuUHJvZ3Jlc3NCYXI7XG5cdFx0cHVibGljIGJ1ZmZlcjE6TGF5YS5CdXR0b247XG5cdFx0cHVibGljIGJ1ZmZlcjI6TGF5YS5CdXR0b247XG5cdFx0cHVibGljIGJ1ZmZlcjM6TGF5YS5CdXR0b247XG5cdFx0cHVibGljIG1Db2luOkxheWEuTGFiZWw7XG5cdFx0cHVibGljIGxpZmUxOkxheWEuU3ByaXRlO1xuXHRcdHB1YmxpYyBsaWZlMjpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgbGlmZTM6TGF5YS5TcHJpdGU7XG5cdFx0cHVibGljIGxpZmU0OkxheWEuU3ByaXRlO1xuXHRcdHB1YmxpYyBsaWZlNTpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgcHJvZ3Jlc3M6TGF5YS5Qcm9ncmVzc0Jhcjtcblx0XHRwdWJsaWMgYnVmZmVySWNvbjpMYXlhLlNwcml0ZTtcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcIkxvYWRTY2VuZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBSRUcoXCJ1aS5Mb2FkU2NlbmVVSVwiLExvYWRTY2VuZVVJKTtcclxuICAgIGV4cG9ydCBjbGFzcyBXYXJuaW5nRGlhbG9nVUkgZXh0ZW5kcyBsYXlhLmRpc3BsYXkuU2NlbmUge1xyXG5cdFx0cHVibGljIHRpcHM6TGF5YS5MYWJlbDtcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcIldhcm5pbmdEaWFsb2dcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUkVHKFwidWkuV2FybmluZ0RpYWxvZ1VJXCIsV2FybmluZ0RpYWxvZ1VJKTtcclxufVxyIl19
